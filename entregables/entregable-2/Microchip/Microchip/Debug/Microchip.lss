
Microchip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00001284  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800234  00800234  0000144c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aa0  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aed  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd8  00000000  00000000  00003b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00004968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000652  00000000  00000000  00004c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010b7  00000000  00000000  000052ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006365  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      38:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_14>
      3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      68:	3a 03       	fmul	r19, r18
      6a:	71 03       	mulsu	r23, r17
      6c:	ab 03       	fmulsu	r18, r19
      6e:	08 04       	cpc	r0, r8
      70:	7f 04       	cpc	r7, r15
      72:	c2 04       	cpc	r12, r2
      74:	e4 04       	cpc	r14, r4

00000076 <LcdCustomChar>:
      76:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      86:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      96:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      a6:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf ef       	ldi	r28, 0xFF	; 255
      bc:	d8 e0       	ldi	r29, 0x08	; 8
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
      c2:	12 e0       	ldi	r17, 0x02	; 2
      c4:	a0 e0       	ldi	r26, 0x00	; 0
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	e4 e8       	ldi	r30, 0x84	; 132
      ca:	f2 e1       	ldi	r31, 0x12	; 18
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
      ce:	05 90       	lpm	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	a4 33       	cpi	r26, 0x34	; 52
      d4:	b1 07       	cpc	r27, r17
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_clear_bss>:
      d8:	22 e0       	ldi	r18, 0x02	; 2
      da:	a4 e3       	ldi	r26, 0x34	; 52
      dc:	b2 e0       	ldi	r27, 0x02	; 2
      de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
      e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
      e2:	a5 34       	cpi	r26, 0x45	; 69
      e4:	b2 07       	cpc	r27, r18
      e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
      e8:	0e 94 20 05 	call	0xa40	; 0xa40 <main>
      ec:	0c 94 40 09 	jmp	0x1280	; 0x1280 <_exit>

000000f0 <__bad_interrupt>:
      f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <time>:
      f4:	fc 01       	movw	r30, r24
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <__system_time>
      fe:	70 91 42 02 	lds	r23, 0x0242	; 0x800242 <__system_time+0x1>
     102:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <__system_time+0x2>
     106:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <__system_time+0x3>
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	30 97       	sbiw	r30, 0x00	; 0
     10e:	21 f0       	breq	.+8      	; 0x118 <time+0x24>
     110:	60 83       	st	Z, r22
     112:	71 83       	std	Z+1, r23	; 0x01
     114:	82 83       	std	Z+2, r24	; 0x02
     116:	93 83       	std	Z+3, r25	; 0x03
     118:	08 95       	ret

0000011a <KEYPAD_init>:
 * @brief Inicializa el teclado matricial
 */
void KEYPAD_init(void)
{
  // Configurar filas como salidas
  DDRB |= (1 << ROWA) | (1 << ROWB) | (1 << ROWC);
     11a:	84 b1       	in	r24, 0x04	; 4
     11c:	89 61       	ori	r24, 0x19	; 25
     11e:	84 b9       	out	0x04, r24	; 4
  DDRD |= (1 << ROWD);
     120:	8a b1       	in	r24, 0x0a	; 10
     122:	80 68       	ori	r24, 0x80	; 128
     124:	8a b9       	out	0x0a, r24	; 10

  // Configurar columnas como entradas con pull-up
  DDRD &= ~((1 << COLA) | (1 << COLB) | (1 << COLC) | (1 << COLD));
     126:	8a b1       	in	r24, 0x0a	; 10
     128:	83 7c       	andi	r24, 0xC3	; 195
     12a:	8a b9       	out	0x0a, r24	; 10
  PORTD |= (1 << COLA) | (1 << COLB) | (1 << COLC) | (1 << COLD);
     12c:	8b b1       	in	r24, 0x0b	; 11
     12e:	8c 63       	ori	r24, 0x3C	; 60
     130:	8b b9       	out	0x0b, r24	; 11
     132:	08 95       	ret

00000134 <KEYPAD_scan>:
 * @param key Puntero para almacenar la tecla detectada
 * @return 1 si se detectó una tecla, 0 en caso contrario
 */
uint8_t KEYPAD_scan(uint8_t *key)
{
  for (uint8_t row = 0; row < 4; row++)
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	5a c0       	rjmp	.+180    	; 0x1ec <KEYPAD_scan+0xb8>
  {
    // Activar todas las filas (HIGH)
    PORTB |= (1 << ROWA) | (1 << ROWB) | (1 << ROWC);
     138:	25 b1       	in	r18, 0x05	; 5
     13a:	29 61       	ori	r18, 0x19	; 25
     13c:	25 b9       	out	0x05, r18	; 5
    PORTD |= (1 << ROWD);
     13e:	2b b1       	in	r18, 0x0b	; 11
     140:	20 68       	ori	r18, 0x80	; 128
     142:	2b b9       	out	0x0b, r18	; 11

    // Desactivar la fila actual (LOW)
    switch (row)
     144:	e1 30       	cpi	r30, 0x01	; 1
     146:	51 f0       	breq	.+20     	; 0x15c <KEYPAD_scan+0x28>
     148:	28 f0       	brcs	.+10     	; 0x154 <KEYPAD_scan+0x20>
     14a:	e2 30       	cpi	r30, 0x02	; 2
     14c:	59 f0       	breq	.+22     	; 0x164 <KEYPAD_scan+0x30>
     14e:	e3 30       	cpi	r30, 0x03	; 3
     150:	69 f0       	breq	.+26     	; 0x16c <KEYPAD_scan+0x38>
     152:	0f c0       	rjmp	.+30     	; 0x172 <KEYPAD_scan+0x3e>
    {
    case 0:
      PORTB &= ~(1 << ROWA);
     154:	25 b1       	in	r18, 0x05	; 5
     156:	2f 7e       	andi	r18, 0xEF	; 239
     158:	25 b9       	out	0x05, r18	; 5
      break;
     15a:	0b c0       	rjmp	.+22     	; 0x172 <KEYPAD_scan+0x3e>
    case 1:
      PORTB &= ~(1 << ROWB);
     15c:	25 b1       	in	r18, 0x05	; 5
     15e:	27 7f       	andi	r18, 0xF7	; 247
     160:	25 b9       	out	0x05, r18	; 5
      break;
     162:	07 c0       	rjmp	.+14     	; 0x172 <KEYPAD_scan+0x3e>
    case 2:
      PORTB &= ~(1 << ROWC);
     164:	25 b1       	in	r18, 0x05	; 5
     166:	2e 7f       	andi	r18, 0xFE	; 254
     168:	25 b9       	out	0x05, r18	; 5
      break;
     16a:	03 c0       	rjmp	.+6      	; 0x172 <KEYPAD_scan+0x3e>
    case 3:
      PORTD &= ~(1 << ROWD);
     16c:	2b b1       	in	r18, 0x0b	; 11
     16e:	2f 77       	andi	r18, 0x7F	; 127
     170:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     172:	2a e1       	ldi	r18, 0x1A	; 26
     174:	2a 95       	dec	r18
     176:	f1 f7       	brne	.-4      	; 0x174 <KEYPAD_scan+0x40>
     178:	00 c0       	rjmp	.+0      	; 0x17a <KEYPAD_scan+0x46>
    }

    _delay_us(DEBOUNCE_DELAY_US); // Espera para estabilización

    // Escanear columnas (activas en LOW)
    if (!(PIND & (1 << COLA)))
     17a:	4b 99       	sbic	0x09, 3	; 9
     17c:	0c c0       	rjmp	.+24     	; 0x196 <KEYPAD_scan+0x62>
    {
      *key = keypad_keys[row * 4];
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	ee 0f       	add	r30, r30
     186:	ff 1f       	adc	r31, r31
     188:	e8 5c       	subi	r30, 0xC8	; 200
     18a:	fe 4f       	sbci	r31, 0xFE	; 254
     18c:	20 81       	ld	r18, Z
     18e:	fc 01       	movw	r30, r24
     190:	20 83       	st	Z, r18
      return 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	08 95       	ret
    }
    if (!(PIND & (1 << COLB)))
     196:	4d 99       	sbic	0x09, 5	; 9
     198:	0c c0       	rjmp	.+24     	; 0x1b2 <KEYPAD_scan+0x7e>
    {
      *key = keypad_keys[row * 4 + 1];
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	ee 0f       	add	r30, r30
     1a2:	ff 1f       	adc	r31, r31
     1a4:	e7 5c       	subi	r30, 0xC7	; 199
     1a6:	fe 4f       	sbci	r31, 0xFE	; 254
     1a8:	20 81       	ld	r18, Z
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
      return 1;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	08 95       	ret
    }
    if (!(PIND & (1 << COLC)))
     1b2:	4c 99       	sbic	0x09, 4	; 9
     1b4:	0c c0       	rjmp	.+24     	; 0x1ce <KEYPAD_scan+0x9a>
    {
      *key = keypad_keys[row * 4 + 2];
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	ee 0f       	add	r30, r30
     1be:	ff 1f       	adc	r31, r31
     1c0:	e6 5c       	subi	r30, 0xC6	; 198
     1c2:	fe 4f       	sbci	r31, 0xFE	; 254
     1c4:	20 81       	ld	r18, Z
     1c6:	fc 01       	movw	r30, r24
     1c8:	20 83       	st	Z, r18
      return 1;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	08 95       	ret
    }
    if (!(PIND & (1 << COLD)))
     1ce:	4a 99       	sbic	0x09, 2	; 9
     1d0:	0c c0       	rjmp	.+24     	; 0x1ea <KEYPAD_scan+0xb6>
    {
      *key = keypad_keys[row * 4 + 3];
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	ee 0f       	add	r30, r30
     1da:	ff 1f       	adc	r31, r31
     1dc:	e5 5c       	subi	r30, 0xC5	; 197
     1de:	fe 4f       	sbci	r31, 0xFE	; 254
     1e0:	20 81       	ld	r18, Z
     1e2:	fc 01       	movw	r30, r24
     1e4:	20 83       	st	Z, r18
      return 1;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	08 95       	ret
 * @param key Puntero para almacenar la tecla detectada
 * @return 1 si se detectó una tecla, 0 en caso contrario
 */
uint8_t KEYPAD_scan(uint8_t *key)
{
  for (uint8_t row = 0; row < 4; row++)
     1ea:	ef 5f       	subi	r30, 0xFF	; 255
     1ec:	e4 30       	cpi	r30, 0x04	; 4
     1ee:	08 f4       	brcc	.+2      	; 0x1f2 <KEYPAD_scan+0xbe>
     1f0:	a3 cf       	rjmp	.-186    	; 0x138 <KEYPAD_scan+0x4>
      *key = keypad_keys[row * 4 + 3];
      return 1;
    }
  }

  return 0; // No se detectó tecla presionada
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	08 95       	ret

000001f6 <LCDsendChar>:
		}

		// write character to display
		LCDsendChar(c);
	}
}
     1f6:	65 b1       	in	r22, 0x05	; 5
     1f8:	98 2f       	mov	r25, r24
     1fa:	90 74       	andi	r25, 0x40	; 64
     1fc:	49 2f       	mov	r20, r25
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	55 95       	asr	r21
     202:	47 95       	ror	r20
     204:	55 95       	asr	r21
     206:	47 95       	ror	r20
     208:	55 95       	asr	r21
     20a:	47 95       	ror	r20
     20c:	55 95       	asr	r21
     20e:	47 95       	ror	r20
     210:	98 2f       	mov	r25, r24
     212:	90 78       	andi	r25, 0x80	; 128
     214:	29 2f       	mov	r18, r25
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	02 2e       	mov	r0, r18
     21a:	23 2f       	mov	r18, r19
     21c:	00 0c       	add	r0, r0
     21e:	22 1f       	adc	r18, r18
     220:	33 0b       	sbc	r19, r19
     222:	00 0c       	add	r0, r0
     224:	22 1f       	adc	r18, r18
     226:	33 1f       	adc	r19, r19
     228:	96 2f       	mov	r25, r22
     22a:	99 7f       	andi	r25, 0xF9	; 249
     22c:	49 2b       	or	r20, r25
     22e:	24 2b       	or	r18, r20
     230:	25 b9       	out	0x05, r18	; 5
     232:	68 b1       	in	r22, 0x08	; 8
     234:	98 2f       	mov	r25, r24
     236:	90 71       	andi	r25, 0x10	; 16
     238:	49 2f       	mov	r20, r25
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	55 95       	asr	r21
     23e:	47 95       	ror	r20
     240:	55 95       	asr	r21
     242:	47 95       	ror	r20
     244:	55 95       	asr	r21
     246:	47 95       	ror	r20
     248:	98 2f       	mov	r25, r24
     24a:	90 72       	andi	r25, 0x20	; 32
     24c:	29 2f       	mov	r18, r25
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	35 95       	asr	r19
     252:	27 95       	ror	r18
     254:	35 95       	asr	r19
     256:	27 95       	ror	r18
     258:	35 95       	asr	r19
     25a:	27 95       	ror	r18
     25c:	96 2f       	mov	r25, r22
     25e:	99 7f       	andi	r25, 0xF9	; 249
     260:	49 2b       	or	r20, r25
     262:	24 2b       	or	r18, r20
     264:	28 b9       	out	0x08, r18	; 8
     266:	9b b1       	in	r25, 0x0b	; 11
     268:	92 60       	ori	r25, 0x02	; 2
     26a:	9b b9       	out	0x0b, r25	; 11
     26c:	9b b1       	in	r25, 0x0b	; 11
     26e:	91 60       	ori	r25, 0x01	; 1
     270:	9b b9       	out	0x0b, r25	; 11
     272:	25 ed       	ldi	r18, 0xD5	; 213
     274:	2a 95       	dec	r18
     276:	f1 f7       	brne	.-4      	; 0x274 <LCDsendChar+0x7e>
     278:	00 00       	nop
     27a:	9b b1       	in	r25, 0x0b	; 11
     27c:	9e 7f       	andi	r25, 0xFE	; 254
     27e:	9b b9       	out	0x0b, r25	; 11
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	9d 7f       	andi	r25, 0xFD	; 253
     284:	9b b9       	out	0x0b, r25	; 11
     286:	95 ed       	ldi	r25, 0xD5	; 213
     288:	9a 95       	dec	r25
     28a:	f1 f7       	brne	.-4      	; 0x288 <LCDsendChar+0x92>
     28c:	00 00       	nop
     28e:	65 b1       	in	r22, 0x05	; 5
     290:	20 e1       	ldi	r18, 0x10	; 16
     292:	82 9f       	mul	r24, r18
     294:	c0 01       	movw	r24, r0
     296:	11 24       	eor	r1, r1
     298:	ac 01       	movw	r20, r24
     29a:	40 74       	andi	r20, 0x40	; 64
     29c:	55 27       	eor	r21, r21
     29e:	55 95       	asr	r21
     2a0:	47 95       	ror	r20
     2a2:	55 95       	asr	r21
     2a4:	47 95       	ror	r20
     2a6:	55 95       	asr	r21
     2a8:	47 95       	ror	r20
     2aa:	55 95       	asr	r21
     2ac:	47 95       	ror	r20
     2ae:	9c 01       	movw	r18, r24
     2b0:	20 78       	andi	r18, 0x80	; 128
     2b2:	33 27       	eor	r19, r19
     2b4:	02 2e       	mov	r0, r18
     2b6:	23 2f       	mov	r18, r19
     2b8:	00 0c       	add	r0, r0
     2ba:	22 1f       	adc	r18, r18
     2bc:	33 0b       	sbc	r19, r19
     2be:	00 0c       	add	r0, r0
     2c0:	22 1f       	adc	r18, r18
     2c2:	33 1f       	adc	r19, r19
     2c4:	36 2f       	mov	r19, r22
     2c6:	39 7f       	andi	r19, 0xF9	; 249
     2c8:	43 2b       	or	r20, r19
     2ca:	24 2b       	or	r18, r20
     2cc:	25 b9       	out	0x05, r18	; 5
     2ce:	48 b1       	in	r20, 0x08	; 8
     2d0:	9c 01       	movw	r18, r24
     2d2:	20 71       	andi	r18, 0x10	; 16
     2d4:	33 27       	eor	r19, r19
     2d6:	35 95       	asr	r19
     2d8:	27 95       	ror	r18
     2da:	35 95       	asr	r19
     2dc:	27 95       	ror	r18
     2de:	35 95       	asr	r19
     2e0:	27 95       	ror	r18
     2e2:	80 72       	andi	r24, 0x20	; 32
     2e4:	99 27       	eor	r25, r25
     2e6:	95 95       	asr	r25
     2e8:	87 95       	ror	r24
     2ea:	95 95       	asr	r25
     2ec:	87 95       	ror	r24
     2ee:	95 95       	asr	r25
     2f0:	87 95       	ror	r24
     2f2:	94 2f       	mov	r25, r20
     2f4:	99 7f       	andi	r25, 0xF9	; 249
     2f6:	29 2b       	or	r18, r25
     2f8:	82 2b       	or	r24, r18
     2fa:	88 b9       	out	0x08, r24	; 8
     2fc:	8b b1       	in	r24, 0x0b	; 11
     2fe:	82 60       	ori	r24, 0x02	; 2
     300:	8b b9       	out	0x0b, r24	; 11
     302:	8b b1       	in	r24, 0x0b	; 11
     304:	81 60       	ori	r24, 0x01	; 1
     306:	8b b9       	out	0x0b, r24	; 11
     308:	85 ed       	ldi	r24, 0xD5	; 213
     30a:	8a 95       	dec	r24
     30c:	f1 f7       	brne	.-4      	; 0x30a <LCDsendChar+0x114>
     30e:	00 00       	nop
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	8e 7f       	andi	r24, 0xFE	; 254
     314:	8b b9       	out	0x0b, r24	; 11
     316:	8b b1       	in	r24, 0x0b	; 11
     318:	8d 7f       	andi	r24, 0xFD	; 253
     31a:	8b b9       	out	0x0b, r24	; 11
     31c:	95 ed       	ldi	r25, 0xD5	; 213
     31e:	9a 95       	dec	r25
     320:	f1 f7       	brne	.-4      	; 0x31e <LCDsendChar+0x128>
     322:	00 00       	nop
     324:	08 95       	ret

00000326 <LCDsendCommand>:
     326:	65 b1       	in	r22, 0x05	; 5
     328:	98 2f       	mov	r25, r24
     32a:	90 74       	andi	r25, 0x40	; 64
     32c:	49 2f       	mov	r20, r25
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	55 95       	asr	r21
     332:	47 95       	ror	r20
     334:	55 95       	asr	r21
     336:	47 95       	ror	r20
     338:	55 95       	asr	r21
     33a:	47 95       	ror	r20
     33c:	55 95       	asr	r21
     33e:	47 95       	ror	r20
     340:	98 2f       	mov	r25, r24
     342:	90 78       	andi	r25, 0x80	; 128
     344:	29 2f       	mov	r18, r25
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	02 2e       	mov	r0, r18
     34a:	23 2f       	mov	r18, r19
     34c:	00 0c       	add	r0, r0
     34e:	22 1f       	adc	r18, r18
     350:	33 0b       	sbc	r19, r19
     352:	00 0c       	add	r0, r0
     354:	22 1f       	adc	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	96 2f       	mov	r25, r22
     35a:	99 7f       	andi	r25, 0xF9	; 249
     35c:	49 2b       	or	r20, r25
     35e:	24 2b       	or	r18, r20
     360:	25 b9       	out	0x05, r18	; 5
     362:	68 b1       	in	r22, 0x08	; 8
     364:	98 2f       	mov	r25, r24
     366:	90 71       	andi	r25, 0x10	; 16
     368:	49 2f       	mov	r20, r25
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	55 95       	asr	r21
     36e:	47 95       	ror	r20
     370:	55 95       	asr	r21
     372:	47 95       	ror	r20
     374:	55 95       	asr	r21
     376:	47 95       	ror	r20
     378:	98 2f       	mov	r25, r24
     37a:	90 72       	andi	r25, 0x20	; 32
     37c:	29 2f       	mov	r18, r25
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	35 95       	asr	r19
     382:	27 95       	ror	r18
     384:	35 95       	asr	r19
     386:	27 95       	ror	r18
     388:	35 95       	asr	r19
     38a:	27 95       	ror	r18
     38c:	96 2f       	mov	r25, r22
     38e:	99 7f       	andi	r25, 0xF9	; 249
     390:	49 2b       	or	r20, r25
     392:	24 2b       	or	r18, r20
     394:	28 b9       	out	0x08, r18	; 8
     396:	9b b1       	in	r25, 0x0b	; 11
     398:	91 60       	ori	r25, 0x01	; 1
     39a:	9b b9       	out	0x0b, r25	; 11
     39c:	ef e9       	ldi	r30, 0x9F	; 159
     39e:	ff e0       	ldi	r31, 0x0F	; 15
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCDsendCommand+0x7a>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCDsendCommand+0x80>
     3a6:	00 00       	nop
     3a8:	9b b1       	in	r25, 0x0b	; 11
     3aa:	9e 7f       	andi	r25, 0xFE	; 254
     3ac:	9b b9       	out	0x0b, r25	; 11
     3ae:	ef e9       	ldi	r30, 0x9F	; 159
     3b0:	ff e0       	ldi	r31, 0x0F	; 15
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCDsendCommand+0x8c>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCDsendCommand+0x92>
     3b8:	00 00       	nop
     3ba:	65 b1       	in	r22, 0x05	; 5
     3bc:	f0 e1       	ldi	r31, 0x10	; 16
     3be:	8f 9f       	mul	r24, r31
     3c0:	c0 01       	movw	r24, r0
     3c2:	11 24       	eor	r1, r1
     3c4:	ac 01       	movw	r20, r24
     3c6:	40 74       	andi	r20, 0x40	; 64
     3c8:	55 27       	eor	r21, r21
     3ca:	55 95       	asr	r21
     3cc:	47 95       	ror	r20
     3ce:	55 95       	asr	r21
     3d0:	47 95       	ror	r20
     3d2:	55 95       	asr	r21
     3d4:	47 95       	ror	r20
     3d6:	55 95       	asr	r21
     3d8:	47 95       	ror	r20
     3da:	9c 01       	movw	r18, r24
     3dc:	20 78       	andi	r18, 0x80	; 128
     3de:	33 27       	eor	r19, r19
     3e0:	02 2e       	mov	r0, r18
     3e2:	23 2f       	mov	r18, r19
     3e4:	00 0c       	add	r0, r0
     3e6:	22 1f       	adc	r18, r18
     3e8:	33 0b       	sbc	r19, r19
     3ea:	00 0c       	add	r0, r0
     3ec:	22 1f       	adc	r18, r18
     3ee:	33 1f       	adc	r19, r19
     3f0:	36 2f       	mov	r19, r22
     3f2:	39 7f       	andi	r19, 0xF9	; 249
     3f4:	43 2b       	or	r20, r19
     3f6:	24 2b       	or	r18, r20
     3f8:	25 b9       	out	0x05, r18	; 5
     3fa:	48 b1       	in	r20, 0x08	; 8
     3fc:	9c 01       	movw	r18, r24
     3fe:	20 71       	andi	r18, 0x10	; 16
     400:	33 27       	eor	r19, r19
     402:	35 95       	asr	r19
     404:	27 95       	ror	r18
     406:	35 95       	asr	r19
     408:	27 95       	ror	r18
     40a:	35 95       	asr	r19
     40c:	27 95       	ror	r18
     40e:	80 72       	andi	r24, 0x20	; 32
     410:	99 27       	eor	r25, r25
     412:	95 95       	asr	r25
     414:	87 95       	ror	r24
     416:	95 95       	asr	r25
     418:	87 95       	ror	r24
     41a:	95 95       	asr	r25
     41c:	87 95       	ror	r24
     41e:	94 2f       	mov	r25, r20
     420:	99 7f       	andi	r25, 0xF9	; 249
     422:	29 2b       	or	r18, r25
     424:	82 2b       	or	r24, r18
     426:	88 b9       	out	0x08, r24	; 8
     428:	8b b1       	in	r24, 0x0b	; 11
     42a:	81 60       	ori	r24, 0x01	; 1
     42c:	8b b9       	out	0x0b, r24	; 11
     42e:	8f e9       	ldi	r24, 0x9F	; 159
     430:	9f e0       	ldi	r25, 0x0F	; 15
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     438:	00 00       	nop
     43a:	8b b1       	in	r24, 0x0b	; 11
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	8b b9       	out	0x0b, r24	; 11
     440:	ef e9       	ldi	r30, 0x9F	; 159
     442:	ff e0       	ldi	r31, 0x0F	; 15
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     44a:	00 00       	nop
     44c:	08 95       	ret

0000044e <LCDclr>:
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 93 01 	call	0x326	; 0x326 <LCDsendCommand>
     454:	08 95       	ret

00000456 <LCDhome>:
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	0e 94 93 01 	call	0x326	; 0x326 <LCDsendCommand>
     45c:	08 95       	ret

0000045e <LCDstring>:
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	69 f0       	breq	.+26     	; 0x484 <LCDstring+0x26>
     46a:	d6 2f       	mov	r29, r22
     46c:	8c 01       	movw	r16, r24
     46e:	c0 e0       	ldi	r28, 0x00	; 0
     470:	07 c0       	rjmp	.+14     	; 0x480 <LCDstring+0x22>
     472:	f8 01       	movw	r30, r16
     474:	ec 0f       	add	r30, r28
     476:	f1 1d       	adc	r31, r1
     478:	80 81       	ld	r24, Z
     47a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendChar>
     47e:	cf 5f       	subi	r28, 0xFF	; 255
     480:	cd 17       	cp	r28, r29
     482:	b8 f3       	brcs	.-18     	; 0x472 <LCDstring+0x14>
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <LCDGotoXY>:
     48e:	62 30       	cpi	r22, 0x02	; 2
     490:	31 f0       	breq	.+12     	; 0x49e <LCDGotoXY+0x10>
     492:	63 30       	cpi	r22, 0x03	; 3
     494:	31 f0       	breq	.+12     	; 0x4a2 <LCDGotoXY+0x14>
     496:	61 30       	cpi	r22, 0x01	; 1
     498:	29 f4       	brne	.+10     	; 0x4a4 <LCDGotoXY+0x16>
     49a:	80 5c       	subi	r24, 0xC0	; 192
     49c:	03 c0       	rjmp	.+6      	; 0x4a4 <LCDGotoXY+0x16>
     49e:	8c 5e       	subi	r24, 0xEC	; 236
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <LCDGotoXY+0x16>
     4a2:	8c 5a       	subi	r24, 0xAC	; 172
     4a4:	80 68       	ori	r24, 0x80	; 128
     4a6:	0e 94 93 01 	call	0x326	; 0x326 <LCDsendCommand>
     4aa:	08 95       	ret

000004ac <LCDdefinechar>:
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	7c 01       	movw	r14, r24
     4ba:	86 2f       	mov	r24, r22
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	80 64       	ori	r24, 0x40	; 64
     4cc:	c0 e0       	ldi	r28, 0x00	; 0
     4ce:	d0 e0       	ldi	r29, 0x00	; 0
     4d0:	0d c0       	rjmp	.+26     	; 0x4ec <LCDdefinechar+0x40>
     4d2:	f7 01       	movw	r30, r14
     4d4:	ec 0f       	add	r30, r28
     4d6:	fd 1f       	adc	r31, r29
     4d8:	14 91       	lpm	r17, Z
     4da:	01 e0       	ldi	r16, 0x01	; 1
     4dc:	08 0f       	add	r16, r24
     4de:	0e 94 93 01 	call	0x326	; 0x326 <LCDsendCommand>
     4e2:	81 2f       	mov	r24, r17
     4e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendChar>
     4e8:	21 96       	adiw	r28, 0x01	; 1
     4ea:	80 2f       	mov	r24, r16
     4ec:	c8 30       	cpi	r28, 0x08	; 8
     4ee:	d1 05       	cpc	r29, r1
     4f0:	80 f3       	brcs	.-32     	; 0x4d2 <LCDdefinechar+0x26>
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	ff 90       	pop	r15
     4fc:	ef 90       	pop	r14
     4fe:	08 95       	ret

00000500 <LCDinit>:
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	8f e5       	ldi	r24, 0x5F	; 95
     506:	9a ee       	ldi	r25, 0xEA	; 234
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <LCDinit+0x8>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <LCDinit+0xe>
     50e:	00 00       	nop
     510:	85 b1       	in	r24, 0x05	; 5
     512:	89 7f       	andi	r24, 0xF9	; 249
     514:	85 b9       	out	0x05, r24	; 5
     516:	88 b1       	in	r24, 0x08	; 8
     518:	89 7f       	andi	r24, 0xF9	; 249
     51a:	88 b9       	out	0x08, r24	; 8
     51c:	1b b8       	out	0x0b, r1	; 11
     51e:	84 b1       	in	r24, 0x04	; 4
     520:	86 60       	ori	r24, 0x06	; 6
     522:	84 b9       	out	0x04, r24	; 4
     524:	87 b1       	in	r24, 0x07	; 7
     526:	86 60       	ori	r24, 0x06	; 6
     528:	87 b9       	out	0x07, r24	; 7
     52a:	8a b1       	in	r24, 0x0a	; 10
     52c:	83 60       	ori	r24, 0x03	; 3
     52e:	8a b9       	out	0x0a, r24	; 10
     530:	85 b1       	in	r24, 0x05	; 5
     532:	89 7f       	andi	r24, 0xF9	; 249
     534:	85 b9       	out	0x05, r24	; 5
     536:	88 b1       	in	r24, 0x08	; 8
     538:	86 60       	ori	r24, 0x06	; 6
     53a:	88 b9       	out	0x08, r24	; 8
     53c:	8b b1       	in	r24, 0x0b	; 11
     53e:	81 60       	ori	r24, 0x01	; 1
     540:	8b b9       	out	0x0b, r24	; 11
     542:	8f e9       	ldi	r24, 0x9F	; 159
     544:	9f e0       	ldi	r25, 0x0F	; 15
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <LCDinit+0x46>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <LCDinit+0x4c>
     54c:	00 00       	nop
     54e:	8b b1       	in	r24, 0x0b	; 11
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	8b b9       	out	0x0b, r24	; 11
     554:	8f e9       	ldi	r24, 0x9F	; 159
     556:	9f e0       	ldi	r25, 0x0F	; 15
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <LCDinit+0x58>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <LCDinit+0x5e>
     55e:	00 00       	nop
     560:	85 b1       	in	r24, 0x05	; 5
     562:	89 7f       	andi	r24, 0xF9	; 249
     564:	85 b9       	out	0x05, r24	; 5
     566:	88 b1       	in	r24, 0x08	; 8
     568:	86 60       	ori	r24, 0x06	; 6
     56a:	88 b9       	out	0x08, r24	; 8
     56c:	8b b1       	in	r24, 0x0b	; 11
     56e:	81 60       	ori	r24, 0x01	; 1
     570:	8b b9       	out	0x0b, r24	; 11
     572:	8f e9       	ldi	r24, 0x9F	; 159
     574:	9f e0       	ldi	r25, 0x0F	; 15
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <LCDinit+0x76>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <LCDinit+0x7c>
     57c:	00 00       	nop
     57e:	8b b1       	in	r24, 0x0b	; 11
     580:	8e 7f       	andi	r24, 0xFE	; 254
     582:	8b b9       	out	0x0b, r24	; 11
     584:	8f e9       	ldi	r24, 0x9F	; 159
     586:	9f e0       	ldi	r25, 0x0F	; 15
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <LCDinit+0x88>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <LCDinit+0x8e>
     58e:	00 00       	nop
     590:	85 b1       	in	r24, 0x05	; 5
     592:	89 7f       	andi	r24, 0xF9	; 249
     594:	85 b9       	out	0x05, r24	; 5
     596:	88 b1       	in	r24, 0x08	; 8
     598:	89 7f       	andi	r24, 0xF9	; 249
     59a:	84 60       	ori	r24, 0x04	; 4
     59c:	88 b9       	out	0x08, r24	; 8
     59e:	8b b1       	in	r24, 0x0b	; 11
     5a0:	81 60       	ori	r24, 0x01	; 1
     5a2:	8b b9       	out	0x0b, r24	; 11
     5a4:	8f e9       	ldi	r24, 0x9F	; 159
     5a6:	9f e0       	ldi	r25, 0x0F	; 15
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCDinit+0xa8>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <LCDinit+0xae>
     5ae:	00 00       	nop
     5b0:	8b b1       	in	r24, 0x0b	; 11
     5b2:	8e 7f       	andi	r24, 0xFE	; 254
     5b4:	8b b9       	out	0x0b, r24	; 11
     5b6:	8f e9       	ldi	r24, 0x9F	; 159
     5b8:	9f e0       	ldi	r25, 0x0F	; 15
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <LCDinit+0xba>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <LCDinit+0xc0>
     5c0:	00 00       	nop
     5c2:	88 e2       	ldi	r24, 0x28	; 40
     5c4:	0e 94 93 01 	call	0x326	; 0x326 <LCDsendCommand>
     5c8:	8c e0       	ldi	r24, 0x0C	; 12
     5ca:	0e 94 93 01 	call	0x326	; 0x326 <LCDsendCommand>
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	c0 e0       	ldi	r28, 0x00	; 0
     5d2:	0a c0       	rjmp	.+20     	; 0x5e8 <LCDinit+0xe8>
     5d4:	d1 e0       	ldi	r29, 0x01	; 1
     5d6:	d6 0f       	add	r29, r22
     5d8:	8c 2f       	mov	r24, r28
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	8a 58       	subi	r24, 0x8A	; 138
     5de:	9f 4f       	sbci	r25, 0xFF	; 255
     5e0:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCDdefinechar>
     5e4:	c8 5f       	subi	r28, 0xF8	; 248
     5e6:	6d 2f       	mov	r22, r29
     5e8:	c0 34       	cpi	r28, 0x40	; 64
     5ea:	a0 f3       	brcs	.-24     	; 0x5d4 <LCDinit+0xd4>
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <LCD_Init>:

void LCD_Init()
{
	LCDinit();
     5f2:	0e 94 80 02 	call	0x500	; 0x500 <LCDinit>
	LCDclr();
     5f6:	0e 94 27 02 	call	0x44e	; 0x44e <LCDclr>
	LCDhome();
     5fa:	0e 94 2b 02 	call	0x456	; 0x456 <LCDhome>
     5fe:	08 95       	ret

00000600 <timer_init>:
volatile uint8_t gameSecond = 0;

void timer_init(void)
{
    // Configurar el temporizador 0 en modo CTC
    TCCR0A = (1 << WGM01);              // Modo CTC
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
     604:	95 e0       	ldi	r25, 0x05	; 5
     606:	95 bd       	out	0x25, r25	; 37
    OCR0A = 155;                        // Valor de comparación para 1 segundo
     608:	9b e9       	ldi	r25, 0x9B	; 155
     60a:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);             // Habilitar interrupción por comparación
     60c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     610:	08 95       	ret

00000612 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	2f 93       	push	r18
     622:	3f 93       	push	r19
     624:	4f 93       	push	r20
     626:	5f 93       	push	r21
     628:	6f 93       	push	r22
     62a:	7f 93       	push	r23
     62c:	8f 93       	push	r24
     62e:	9f 93       	push	r25
     630:	af 93       	push	r26
     632:	bf 93       	push	r27
     634:	ef 93       	push	r30
     636:	ff 93       	push	r31
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	60 97       	sbiw	r28, 0x10	; 16
     642:	de bf       	out	0x3e, r29	; 62
     644:	cd bf       	out	0x3d, r28	; 61
    static uint8_t pressedKeys[4] = {0, 0, 0, 0};
    static uint8_t currentKey = 0;
    tick++;
     646:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <tick>
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <tick>
    gameTick++;
     650:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <gameTick>
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <gameTick>
    switch (gameState)
     65a:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <gameState>
     65e:	8e 2f       	mov	r24, r30
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	87 30       	cpi	r24, 0x07	; 7
     664:	91 05       	cpc	r25, r1
     666:	08 f0       	brcs	.+2      	; 0x66a <__vector_14+0x58>
     668:	d0 c1       	rjmp	.+928    	; 0xa0a <__stack+0x10b>
     66a:	fc 01       	movw	r30, r24
     66c:	ec 5c       	subi	r30, 0xCC	; 204
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	0c 94 57 05 	jmp	0xaae	; 0xaae <__tablejump2__>
    {
    case START:
        keyPressed = -1;
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <keyPressed>
        KEYPAD_scan(&keyPressed);
     67a:	85 e0       	ldi	r24, 0x05	; 5
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 9a 00 	call	0x134	; 0x134 <KEYPAD_scan>
        if (keyPressed == '*')
     682:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <keyPressed>
     686:	8a 32       	cpi	r24, 0x2A	; 42
     688:	09 f0       	breq	.+2      	; 0x68c <__vector_14+0x7a>
     68a:	bf c1       	rjmp	.+894    	; 0xa0a <__stack+0x10b>
        {
            gameState = SHOW_PASSWORD;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <gameState>
            LCDclr();
     692:	0e 94 27 02 	call	0x44e	; 0x44e <LCDclr>
            password = dicc[rand() % 25];
     696:	0e 94 cc 05 	call	0xb98	; 0xb98 <rand>
     69a:	69 e1       	ldi	r22, 0x19	; 25
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	0e 94 43 05 	call	0xa86	; 0xa86 <__divmodhi4>
     6a2:	fc 01       	movw	r30, r24
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	ea 5f       	subi	r30, 0xFA	; 250
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <password+0x1>
     6b4:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <password>
            LCDGotoXY(0, 0);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDstring("Password: ", 10);
     6c0:	6a e0       	ldi	r22, 0x0A	; 10
     6c2:	88 e4       	ldi	r24, 0x48	; 72
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            LCDstring(password, 5);
     6ca:	65 e0       	ldi	r22, 0x05	; 5
     6cc:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <password>
     6d0:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <password+0x1>
     6d4:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            tick = 0;
     6d8:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <tick>
            second = 0;
     6dc:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <second>
     6e0:	94 c1       	rjmp	.+808    	; 0xa0a <__stack+0x10b>
        }
        break;

    case SHOW_PASSWORD:
        if (tick >= 100)
     6e2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <tick>
     6e6:	84 36       	cpi	r24, 0x64	; 100
     6e8:	38 f0       	brcs	.+14     	; 0x6f8 <__vector_14+0xe6>
        {
            second++;
     6ea:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <second>
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <second>
            tick = 0;
     6f4:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <tick>
        }
        if (second >= 2)
     6f8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <second>
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	08 f4       	brcc	.+2      	; 0x702 <__vector_14+0xf0>
     700:	84 c1       	rjmp	.+776    	; 0xa0a <__stack+0x10b>
        {
            second = 0;
     702:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <second>
            gameTick = 0;
     706:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <gameTick>
            gameSecond = 0;
     70a:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <gameSecond>
            xPosition = 0;
     70e:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <xPosition>
            currentKey = 0;
     712:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <currentKey.2460>
            lifes = 3;
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lifes>
            LCDclr();
     71c:	0e 94 27 02 	call	0x44e	; 0x44e <LCDclr>
            LCDGotoXY(0, 0);
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDstring("Password: ", 10);
     728:	6a e0       	ldi	r22, 0x0A	; 10
     72a:	88 e4       	ldi	r24, 0x48	; 72
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            LCDGotoXY(13, 1);
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	8d e0       	ldi	r24, 0x0D	; 13
     736:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDsendChar(lifes + '0');
     73a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lifes>
     73e:	80 5d       	subi	r24, 0xD0	; 208
     740:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendChar>
            LCDstring("/3", 2);
     744:	62 e0       	ldi	r22, 0x02	; 2
     746:	83 e5       	ldi	r24, 0x53	; 83
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            gameState = GAME;
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <gameState>
     754:	5a c1       	rjmp	.+692    	; 0xa0a <__stack+0x10b>
        }
        break;

    case GAME:
        if (gameTick >= 100)
     756:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <gameTick>
     75a:	84 36       	cpi	r24, 0x64	; 100
     75c:	38 f0       	brcs	.+14     	; 0x76c <__vector_14+0x15a>
        {
            gameSecond++;
     75e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <gameSecond>
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <gameSecond>
            gameTick = 0;
     768:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <gameTick>
        }
        pressedKeys[currentKey] = 0;
     76c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <currentKey.2460>
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	8c 5c       	subi	r24, 0xCC	; 204
     774:	9d 4f       	sbci	r25, 0xFD	; 253
     776:	fc 01       	movw	r30, r24
     778:	10 82       	st	Z, r1
        KEYPAD_scan(&pressedKeys[currentKey]);
     77a:	0e 94 9a 00 	call	0x134	; 0x134 <KEYPAD_scan>
        switch (pressedKeys[currentKey])
     77e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <currentKey.2460>
     782:	28 2f       	mov	r18, r24
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	ec 5c       	subi	r30, 0xCC	; 204
     78a:	fd 4f       	sbci	r31, 0xFD	; 253
     78c:	90 81       	ld	r25, Z
     78e:	99 23       	and	r25, r25
     790:	69 f1       	breq	.+90     	; 0x7ec <__vector_14+0x1da>
     792:	93 32       	cpi	r25, 0x23	; 35
     794:	d9 f4       	brne	.+54     	; 0x7cc <__vector_14+0x1ba>
        {
        case '#':
            pressedKeys[currentKey] = '\0';
     796:	f9 01       	movw	r30, r18
     798:	ec 5c       	subi	r30, 0xCC	; 204
     79a:	fd 4f       	sbci	r31, 0xFD	; 253
     79c:	10 82       	st	Z, r1
            gameState = atoi(pressedKeys) == password[xPosition] ? HIT : MISS;
     79e:	84 e3       	ldi	r24, 0x34	; 52
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <atoi>
     7a6:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <xPosition>
     7aa:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <password>
     7ae:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <password+0x1>
     7b2:	e2 0f       	add	r30, r18
     7b4:	f1 1d       	adc	r31, r1
     7b6:	20 81       	ld	r18, Z
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	82 17       	cp	r24, r18
     7bc:	93 07       	cpc	r25, r19
     7be:	11 f4       	brne	.+4      	; 0x7c4 <__vector_14+0x1b2>
     7c0:	83 e0       	ldi	r24, 0x03	; 3
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <__vector_14+0x1b4>
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <gameState>
            break;
     7ca:	10 c0       	rjmp	.+32     	; 0x7ec <__vector_14+0x1da>
        case 0:
            break;
        default:
            LCDGotoXY(currentKey, 1);
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDsendChar(pressedKeys[currentKey]);
     7d2:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <currentKey.2460>
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	ec 5c       	subi	r30, 0xCC	; 204
     7da:	fd 4f       	sbci	r31, 0xFD	; 253
     7dc:	80 81       	ld	r24, Z
     7de:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendChar>
            currentKey++;
     7e2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <currentKey.2460>
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <currentKey.2460>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ec:	ff ef       	ldi	r31, 0xFF	; 255
     7ee:	23 ec       	ldi	r18, 0xC3	; 195
     7f0:	89 e0       	ldi	r24, 0x09	; 9
     7f2:	f1 50       	subi	r31, 0x01	; 1
     7f4:	20 40       	sbci	r18, 0x00	; 0
     7f6:	80 40       	sbci	r24, 0x00	; 0
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <__vector_14+0x1e0>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <__vector_14+0x1ea>
     7fc:	00 00       	nop
            break;
        }
        _delay_ms(200);
        if (currentKey >= 4)
     7fe:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <currentKey.2460>
     802:	84 30       	cpi	r24, 0x04	; 4
     804:	08 f4       	brcc	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	01 c1       	rjmp	.+514    	; 0xa0a <__stack+0x10b>
        {
            gameState = MISS;
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <gameState>
     80e:	fd c0       	rjmp	.+506    	; 0xa0a <__stack+0x10b>
        }

        break;

    case HIT:
        if (gameTick >= 100)
     810:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <gameTick>
     814:	84 36       	cpi	r24, 0x64	; 100
     816:	38 f0       	brcs	.+14     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
        {
            gameSecond++;
     818:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <gameSecond>
     81c:	8f 5f       	subi	r24, 0xFF	; 255
     81e:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <gameSecond>
            gameTick = 0;
     822:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <gameTick>
        }
        xPosition++;
     826:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <xPosition>
     82a:	8f 5f       	subi	r24, 0xFF	; 255
     82c:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <xPosition>
        currentKey = 0;
     830:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <currentKey.2460>
        LCDGotoXY(10, 0);
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	8a e0       	ldi	r24, 0x0A	; 10
     838:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
        LCDstring(password, xPosition);
     83c:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <xPosition>
     840:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <password>
     844:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <password+0x1>
     848:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
        LCDGotoXY(0, 1);
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
        LCDstring("    ", 4);
     854:	64 e0       	ldi	r22, 0x04	; 4
     856:	86 e5       	ldi	r24, 0x56	; 86
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
        if (xPosition >= 5)
     85e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <xPosition>
     862:	85 30       	cpi	r24, 0x05	; 5
     864:	08 f4       	brcc	.+2      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     866:	47 c0       	rjmp	.+142    	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
        {
            tick = 0;
     868:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <tick>
            second = 0;
     86c:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <second>
            LCDclr();
     870:	0e 94 27 02 	call	0x44e	; 0x44e <LCDclr>
            LCDGotoXY(0, 0);
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDstring("Ganaste!", 8);
     87c:	68 e0       	ldi	r22, 0x08	; 8
     87e:	8b e5       	ldi	r24, 0x5B	; 91
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>

            char message[16];
            sprintf(message, "Tiempo: %d seg.", gameSecond);
     886:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <gameSecond>
     88a:	1f 92       	push	r1
     88c:	8f 93       	push	r24
     88e:	84 e6       	ldi	r24, 0x64	; 100
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	8e 01       	movw	r16, r28
     898:	0f 5f       	subi	r16, 0xFF	; 255
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
     89c:	1f 93       	push	r17
     89e:	0f 93       	push	r16
     8a0:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
            uint8_t length = strlen(message);
     8a4:	f8 01       	movw	r30, r16
     8a6:	01 90       	ld	r0, Z+
     8a8:	00 20       	and	r0, r0
     8aa:	e9 f7       	brne	.-6      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	cf 01       	movw	r24, r30
     8b0:	80 1b       	sub	r24, r16
     8b2:	91 0b       	sbc	r25, r17
     8b4:	8c 01       	movw	r16, r24
            uint8_t start_pos = 0;

            if (length < 16)
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	80 31       	cpi	r24, 0x10	; 16
     8c4:	58 f4       	brcc	.+22     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
                start_pos = (16 - length) / 2;
     8c6:	20 e1       	ldi	r18, 0x10	; 16
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	28 1b       	sub	r18, r24
     8cc:	31 09       	sbc	r19, r1
     8ce:	c9 01       	movw	r24, r18
     8d0:	99 23       	and	r25, r25
     8d2:	0c f4       	brge	.+2      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	95 95       	asr	r25
     8d8:	87 95       	ror	r24
     8da:	01 c0       	rjmp	.+2      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
            LCDstring("Ganaste!", 8);

            char message[16];
            sprintf(message, "Tiempo: %d seg.", gameSecond);
            uint8_t length = strlen(message);
            uint8_t start_pos = 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0

            if (length < 16)
                start_pos = (16 - length) / 2;

            LCDGotoXY(start_pos, 1);
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDstring(message, length);
     8e4:	60 2f       	mov	r22, r16
     8e6:	ce 01       	movw	r24, r28
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>

            gameState = WIN;
     8ee:	85 e0       	ldi	r24, 0x05	; 5
     8f0:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <gameState>
     8f4:	8a c0       	rjmp	.+276    	; 0xa0a <__stack+0x10b>
        }
        else
        {
            gameState = GAME;
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <gameState>
     8fc:	86 c0       	rjmp	.+268    	; 0xa0a <__stack+0x10b>
        }
        break;

    case MISS:
        if (gameTick >= 100)
     8fe:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <gameTick>
     902:	84 36       	cpi	r24, 0x64	; 100
     904:	38 f0       	brcs	.+14     	; 0x914 <__stack+0x15>
        {
            gameSecond++;
     906:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <gameSecond>
     90a:	8f 5f       	subi	r24, 0xFF	; 255
     90c:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <gameSecond>
            gameTick = 0;
     910:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <gameTick>
        }
        currentKey = 0;
     914:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <currentKey.2460>
        LCDGotoXY(0, 1);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
        LCDstring("    ", 4);
     920:	64 e0       	ldi	r22, 0x04	; 4
     922:	86 e5       	ldi	r24, 0x56	; 86
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
        lifes--;
     92a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lifes>
     92e:	81 50       	subi	r24, 0x01	; 1
     930:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lifes>
        LCDGotoXY(13, 1);
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	8d e0       	ldi	r24, 0x0D	; 13
     938:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
        LCDsendChar(lifes + '0');
     93c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lifes>
     940:	80 5d       	subi	r24, 0xD0	; 208
     942:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendChar>
        if (lifes <= 0)
     946:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lifes>
     94a:	81 11       	cpse	r24, r1
     94c:	17 c0       	rjmp	.+46     	; 0x97c <__stack+0x7d>
        {
            tick = 0;
     94e:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <tick>
            second = 0;
     952:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <second>
            LCDclr();
     956:	0e 94 27 02 	call	0x44e	; 0x44e <LCDclr>
            LCDGotoXY(0, 0);
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDstring("Perdiste!", 9);
     962:	69 e0       	ldi	r22, 0x09	; 9
     964:	84 e7       	ldi	r24, 0x74	; 116
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            LCDGotoXY(0, 1);
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            gameState = LOSE;
     974:	86 e0       	ldi	r24, 0x06	; 6
     976:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <gameState>
     97a:	47 c0       	rjmp	.+142    	; 0xa0a <__stack+0x10b>
        }
        else
        {
            gameState = GAME;
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <gameState>
     982:	43 c0       	rjmp	.+134    	; 0xa0a <__stack+0x10b>
        }
        break;

    case WIN:
        if (tick >= 100)
     984:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <tick>
     988:	84 36       	cpi	r24, 0x64	; 100
     98a:	38 f0       	brcs	.+14     	; 0x99a <__stack+0x9b>
        {
            second++;
     98c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <second>
     990:	8f 5f       	subi	r24, 0xFF	; 255
     992:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <second>
            tick = 0;
     996:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <tick>
        }
        if (second >= 5)
     99a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <second>
     99e:	85 30       	cpi	r24, 0x05	; 5
     9a0:	a0 f1       	brcs	.+104    	; 0xa0a <__stack+0x10b>
        {
            LCDclr();
     9a2:	0e 94 27 02 	call	0x44e	; 0x44e <LCDclr>
            LCDstring("--Bienvenido--", 15);
     9a6:	6f e0       	ldi	r22, 0x0F	; 15
     9a8:	8e e7       	ldi	r24, 0x7E	; 126
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            LCDGotoXY(0, 1);
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDstring("Presiona * init", 15);
     9b8:	6f e0       	ldi	r22, 0x0F	; 15
     9ba:	8d e8       	ldi	r24, 0x8D	; 141
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            gameState = START;
     9c2:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <gameState>
     9c6:	21 c0       	rjmp	.+66     	; 0xa0a <__stack+0x10b>
        }
        break;

    case LOSE:
        if (tick >= 100)
     9c8:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <tick>
     9cc:	84 36       	cpi	r24, 0x64	; 100
     9ce:	38 f0       	brcs	.+14     	; 0x9de <__stack+0xdf>
        {
            second++;
     9d0:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <second>
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <second>
            tick = 0;
     9da:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <tick>
        }
        if (second >= 5)
     9de:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <second>
     9e2:	85 30       	cpi	r24, 0x05	; 5
     9e4:	90 f0       	brcs	.+36     	; 0xa0a <__stack+0x10b>
        {
            LCDclr();
     9e6:	0e 94 27 02 	call	0x44e	; 0x44e <LCDclr>
            LCDstring("--Bienvenido--", 15);
     9ea:	6f e0       	ldi	r22, 0x0F	; 15
     9ec:	8e e7       	ldi	r24, 0x7E	; 126
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            LCDGotoXY(0, 1);
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
            LCDstring("Presiona * init", 15);
     9fc:	6f e0       	ldi	r22, 0x0F	; 15
     9fe:	8d e8       	ldi	r24, 0x8D	; 141
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
            gameState = START;
     a06:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <gameState>
        }
        break;
    }
}
     a0a:	60 96       	adiw	r28, 0x10	; 16
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	0f 90       	pop	r0
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	0f 90       	pop	r0
     a3c:	1f 90       	pop	r1
     a3e:	18 95       	reti

00000a40 <main>:

int main(void)
{
    LCD_Init();
     a40:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_Init>
    KEYPAD_init();
     a44:	0e 94 8d 00 	call	0x11a	; 0x11a <KEYPAD_init>
    timer_init();
     a48:	0e 94 00 03 	call	0x600	; 0x600 <timer_init>
     a4c:	8f e3       	ldi	r24, 0x3F	; 63
     a4e:	9c e9       	ldi	r25, 0x9C	; 156
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <main+0x10>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <main+0x16>
     a56:	00 00       	nop
    _delay_ms(10);
    srand(time(NULL)); // Inicializar la semilla para la función rand()
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 7a 00 	call	0xf4	; 0xf4 <time>
     a60:	cb 01       	movw	r24, r22
     a62:	0e 94 d1 05 	call	0xba2	; 0xba2 <srand>
    LCDstring("--Bienvenido--", 15);
     a66:	6f e0       	ldi	r22, 0x0F	; 15
     a68:	8e e7       	ldi	r24, 0x7E	; 126
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
    LCDGotoXY(0, 1);
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 47 02 	call	0x48e	; 0x48e <LCDGotoXY>
    LCDstring("Presiona * init", 15);
     a78:	6f e0       	ldi	r22, 0x0F	; 15
     a7a:	8d e8       	ldi	r24, 0x8D	; 141
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 2f 02 	call	0x45e	; 0x45e <LCDstring>
    sei(); // Habilitar interrupciones globales
     a82:	78 94       	sei
     a84:	ff cf       	rjmp	.-2      	; 0xa84 <main+0x44>

00000a86 <__divmodhi4>:
     a86:	97 fb       	bst	r25, 7
     a88:	07 2e       	mov	r0, r23
     a8a:	16 f4       	brtc	.+4      	; 0xa90 <__divmodhi4+0xa>
     a8c:	00 94       	com	r0
     a8e:	07 d0       	rcall	.+14     	; 0xa9e <__divmodhi4_neg1>
     a90:	77 fd       	sbrc	r23, 7
     a92:	09 d0       	rcall	.+18     	; 0xaa6 <__divmodhi4_neg2>
     a94:	0e 94 6c 05 	call	0xad8	; 0xad8 <__udivmodhi4>
     a98:	07 fc       	sbrc	r0, 7
     a9a:	05 d0       	rcall	.+10     	; 0xaa6 <__divmodhi4_neg2>
     a9c:	3e f4       	brtc	.+14     	; 0xaac <__divmodhi4_exit>

00000a9e <__divmodhi4_neg1>:
     a9e:	90 95       	com	r25
     aa0:	81 95       	neg	r24
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
     aa4:	08 95       	ret

00000aa6 <__divmodhi4_neg2>:
     aa6:	70 95       	com	r23
     aa8:	61 95       	neg	r22
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255

00000aac <__divmodhi4_exit>:
     aac:	08 95       	ret

00000aae <__tablejump2__>:
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	05 90       	lpm	r0, Z+
     ab4:	f4 91       	lpm	r31, Z
     ab6:	e0 2d       	mov	r30, r0
     ab8:	09 94       	ijmp

00000aba <__umulhisi3>:
     aba:	a2 9f       	mul	r26, r18
     abc:	b0 01       	movw	r22, r0
     abe:	b3 9f       	mul	r27, r19
     ac0:	c0 01       	movw	r24, r0
     ac2:	a3 9f       	mul	r26, r19
     ac4:	70 0d       	add	r23, r0
     ac6:	81 1d       	adc	r24, r1
     ac8:	11 24       	eor	r1, r1
     aca:	91 1d       	adc	r25, r1
     acc:	b2 9f       	mul	r27, r18
     ace:	70 0d       	add	r23, r0
     ad0:	81 1d       	adc	r24, r1
     ad2:	11 24       	eor	r1, r1
     ad4:	91 1d       	adc	r25, r1
     ad6:	08 95       	ret

00000ad8 <__udivmodhi4>:
     ad8:	aa 1b       	sub	r26, r26
     ada:	bb 1b       	sub	r27, r27
     adc:	51 e1       	ldi	r21, 0x11	; 17
     ade:	07 c0       	rjmp	.+14     	; 0xaee <__udivmodhi4_ep>

00000ae0 <__udivmodhi4_loop>:
     ae0:	aa 1f       	adc	r26, r26
     ae2:	bb 1f       	adc	r27, r27
     ae4:	a6 17       	cp	r26, r22
     ae6:	b7 07       	cpc	r27, r23
     ae8:	10 f0       	brcs	.+4      	; 0xaee <__udivmodhi4_ep>
     aea:	a6 1b       	sub	r26, r22
     aec:	b7 0b       	sbc	r27, r23

00000aee <__udivmodhi4_ep>:
     aee:	88 1f       	adc	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	5a 95       	dec	r21
     af4:	a9 f7       	brne	.-22     	; 0xae0 <__udivmodhi4_loop>
     af6:	80 95       	com	r24
     af8:	90 95       	com	r25
     afa:	bc 01       	movw	r22, r24
     afc:	cd 01       	movw	r24, r26
     afe:	08 95       	ret

00000b00 <do_rand>:
     b00:	8f 92       	push	r8
     b02:	9f 92       	push	r9
     b04:	af 92       	push	r10
     b06:	bf 92       	push	r11
     b08:	cf 92       	push	r12
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
     b16:	68 81       	ld	r22, Y
     b18:	79 81       	ldd	r23, Y+1	; 0x01
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	61 15       	cp	r22, r1
     b20:	71 05       	cpc	r23, r1
     b22:	81 05       	cpc	r24, r1
     b24:	91 05       	cpc	r25, r1
     b26:	21 f4       	brne	.+8      	; 0xb30 <do_rand+0x30>
     b28:	64 e2       	ldi	r22, 0x24	; 36
     b2a:	79 ed       	ldi	r23, 0xD9	; 217
     b2c:	8b e5       	ldi	r24, 0x5B	; 91
     b2e:	97 e0       	ldi	r25, 0x07	; 7
     b30:	2d e1       	ldi	r18, 0x1D	; 29
     b32:	33 ef       	ldi	r19, 0xF3	; 243
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	0e 94 b5 08 	call	0x116a	; 0x116a <__divmodsi4>
     b3c:	49 01       	movw	r8, r18
     b3e:	5a 01       	movw	r10, r20
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	a7 ea       	ldi	r26, 0xA7	; 167
     b46:	b1 e4       	ldi	r27, 0x41	; 65
     b48:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__muluhisi3>
     b4c:	6b 01       	movw	r12, r22
     b4e:	7c 01       	movw	r14, r24
     b50:	ac ee       	ldi	r26, 0xEC	; 236
     b52:	b4 ef       	ldi	r27, 0xF4	; 244
     b54:	a5 01       	movw	r20, r10
     b56:	94 01       	movw	r18, r8
     b58:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulohisi3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	8c 0d       	add	r24, r12
     b62:	9d 1d       	adc	r25, r13
     b64:	ae 1d       	adc	r26, r14
     b66:	bf 1d       	adc	r27, r15
     b68:	b7 ff       	sbrs	r27, 7
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <do_rand+0x72>
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	a1 09       	sbc	r26, r1
     b70:	b0 48       	sbci	r27, 0x80	; 128
     b72:	88 83       	st	Y, r24
     b74:	99 83       	std	Y+1, r25	; 0x01
     b76:	aa 83       	std	Y+2, r26	; 0x02
     b78:	bb 83       	std	Y+3, r27	; 0x03
     b7a:	9f 77       	andi	r25, 0x7F	; 127
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	8f 90       	pop	r8
     b90:	08 95       	ret

00000b92 <rand_r>:
     b92:	0e 94 80 05 	call	0xb00	; 0xb00 <do_rand>
     b96:	08 95       	ret

00000b98 <rand>:
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	0e 94 80 05 	call	0xb00	; 0xb00 <do_rand>
     ba0:	08 95       	ret

00000ba2 <srand>:
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     baa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     bb2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     bb6:	08 95       	ret

00000bb8 <atoi>:
     bb8:	fc 01       	movw	r30, r24
     bba:	88 27       	eor	r24, r24
     bbc:	99 27       	eor	r25, r25
     bbe:	e8 94       	clt
     bc0:	21 91       	ld	r18, Z+
     bc2:	20 32       	cpi	r18, 0x20	; 32
     bc4:	e9 f3       	breq	.-6      	; 0xbc0 <atoi+0x8>
     bc6:	29 30       	cpi	r18, 0x09	; 9
     bc8:	10 f0       	brcs	.+4      	; 0xbce <atoi+0x16>
     bca:	2e 30       	cpi	r18, 0x0E	; 14
     bcc:	c8 f3       	brcs	.-14     	; 0xbc0 <atoi+0x8>
     bce:	2b 32       	cpi	r18, 0x2B	; 43
     bd0:	41 f0       	breq	.+16     	; 0xbe2 <atoi+0x2a>
     bd2:	2d 32       	cpi	r18, 0x2D	; 45
     bd4:	39 f4       	brne	.+14     	; 0xbe4 <atoi+0x2c>
     bd6:	68 94       	set
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <atoi+0x2a>
     bda:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulhi_const_10>
     bde:	82 0f       	add	r24, r18
     be0:	91 1d       	adc	r25, r1
     be2:	21 91       	ld	r18, Z+
     be4:	20 53       	subi	r18, 0x30	; 48
     be6:	2a 30       	cpi	r18, 0x0A	; 10
     be8:	c0 f3       	brcs	.-16     	; 0xbda <atoi+0x22>
     bea:	1e f4       	brtc	.+6      	; 0xbf2 <atoi+0x3a>
     bec:	90 95       	com	r25
     bee:	81 95       	neg	r24
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	08 95       	ret

00000bf4 <__mulhi_const_10>:
     bf4:	7a e0       	ldi	r23, 0x0A	; 10
     bf6:	97 9f       	mul	r25, r23
     bf8:	90 2d       	mov	r25, r0
     bfa:	87 9f       	mul	r24, r23
     bfc:	80 2d       	mov	r24, r0
     bfe:	91 0d       	add	r25, r1
     c00:	11 24       	eor	r1, r1
     c02:	08 95       	ret

00000c04 <sprintf>:
     c04:	ae e0       	ldi	r26, 0x0E	; 14
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e8 e0       	ldi	r30, 0x08	; 8
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__prologue_saves__+0x1c>
     c10:	0d 89       	ldd	r16, Y+21	; 0x15
     c12:	1e 89       	ldd	r17, Y+22	; 0x16
     c14:	86 e0       	ldi	r24, 0x06	; 6
     c16:	8c 83       	std	Y+4, r24	; 0x04
     c18:	1a 83       	std	Y+2, r17	; 0x02
     c1a:	09 83       	std	Y+1, r16	; 0x01
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	9f e7       	ldi	r25, 0x7F	; 127
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	ae 01       	movw	r20, r28
     c26:	47 5e       	subi	r20, 0xE7	; 231
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	6f 89       	ldd	r22, Y+23	; 0x17
     c2c:	78 8d       	ldd	r23, Y+24	; 0x18
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	0e 94 24 06 	call	0xc48	; 0xc48 <vfprintf>
     c36:	ef 81       	ldd	r30, Y+7	; 0x07
     c38:	f8 85       	ldd	r31, Y+8	; 0x08
     c3a:	e0 0f       	add	r30, r16
     c3c:	f1 1f       	adc	r31, r17
     c3e:	10 82       	st	Z, r1
     c40:	2e 96       	adiw	r28, 0x0e	; 14
     c42:	e4 e0       	ldi	r30, 0x04	; 4
     c44:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__epilogue_restores__+0x1c>

00000c48 <vfprintf>:
     c48:	ab e0       	ldi	r26, 0x0B	; 11
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ea e2       	ldi	r30, 0x2A	; 42
     c4e:	f6 e0       	ldi	r31, 0x06	; 6
     c50:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__prologue_saves__>
     c54:	6c 01       	movw	r12, r24
     c56:	7b 01       	movw	r14, r22
     c58:	8a 01       	movw	r16, r20
     c5a:	fc 01       	movw	r30, r24
     c5c:	17 82       	std	Z+7, r1	; 0x07
     c5e:	16 82       	std	Z+6, r1	; 0x06
     c60:	83 81       	ldd	r24, Z+3	; 0x03
     c62:	81 ff       	sbrs	r24, 1
     c64:	cc c1       	rjmp	.+920    	; 0xffe <vfprintf+0x3b6>
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	3c 01       	movw	r6, r24
     c6c:	f6 01       	movw	r30, r12
     c6e:	93 81       	ldd	r25, Z+3	; 0x03
     c70:	f7 01       	movw	r30, r14
     c72:	93 fd       	sbrc	r25, 3
     c74:	85 91       	lpm	r24, Z+
     c76:	93 ff       	sbrs	r25, 3
     c78:	81 91       	ld	r24, Z+
     c7a:	7f 01       	movw	r14, r30
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <vfprintf+0x3a>
     c80:	ba c1       	rjmp	.+884    	; 0xff6 <vfprintf+0x3ae>
     c82:	85 32       	cpi	r24, 0x25	; 37
     c84:	39 f4       	brne	.+14     	; 0xc94 <vfprintf+0x4c>
     c86:	93 fd       	sbrc	r25, 3
     c88:	85 91       	lpm	r24, Z+
     c8a:	93 ff       	sbrs	r25, 3
     c8c:	81 91       	ld	r24, Z+
     c8e:	7f 01       	movw	r14, r30
     c90:	85 32       	cpi	r24, 0x25	; 37
     c92:	29 f4       	brne	.+10     	; 0xc9e <vfprintf+0x56>
     c94:	b6 01       	movw	r22, r12
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     c9c:	e7 cf       	rjmp	.-50     	; 0xc6c <vfprintf+0x24>
     c9e:	91 2c       	mov	r9, r1
     ca0:	21 2c       	mov	r2, r1
     ca2:	31 2c       	mov	r3, r1
     ca4:	ff e1       	ldi	r31, 0x1F	; 31
     ca6:	f3 15       	cp	r31, r3
     ca8:	d8 f0       	brcs	.+54     	; 0xce0 <vfprintf+0x98>
     caa:	8b 32       	cpi	r24, 0x2B	; 43
     cac:	79 f0       	breq	.+30     	; 0xccc <vfprintf+0x84>
     cae:	38 f4       	brcc	.+14     	; 0xcbe <vfprintf+0x76>
     cb0:	80 32       	cpi	r24, 0x20	; 32
     cb2:	79 f0       	breq	.+30     	; 0xcd2 <vfprintf+0x8a>
     cb4:	83 32       	cpi	r24, 0x23	; 35
     cb6:	a1 f4       	brne	.+40     	; 0xce0 <vfprintf+0x98>
     cb8:	23 2d       	mov	r18, r3
     cba:	20 61       	ori	r18, 0x10	; 16
     cbc:	1d c0       	rjmp	.+58     	; 0xcf8 <vfprintf+0xb0>
     cbe:	8d 32       	cpi	r24, 0x2D	; 45
     cc0:	61 f0       	breq	.+24     	; 0xcda <vfprintf+0x92>
     cc2:	80 33       	cpi	r24, 0x30	; 48
     cc4:	69 f4       	brne	.+26     	; 0xce0 <vfprintf+0x98>
     cc6:	23 2d       	mov	r18, r3
     cc8:	21 60       	ori	r18, 0x01	; 1
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <vfprintf+0xb0>
     ccc:	83 2d       	mov	r24, r3
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	38 2e       	mov	r3, r24
     cd2:	e3 2d       	mov	r30, r3
     cd4:	e4 60       	ori	r30, 0x04	; 4
     cd6:	3e 2e       	mov	r3, r30
     cd8:	2a c0       	rjmp	.+84     	; 0xd2e <vfprintf+0xe6>
     cda:	f3 2d       	mov	r31, r3
     cdc:	f8 60       	ori	r31, 0x08	; 8
     cde:	1d c0       	rjmp	.+58     	; 0xd1a <vfprintf+0xd2>
     ce0:	37 fc       	sbrc	r3, 7
     ce2:	2d c0       	rjmp	.+90     	; 0xd3e <vfprintf+0xf6>
     ce4:	20 ed       	ldi	r18, 0xD0	; 208
     ce6:	28 0f       	add	r18, r24
     ce8:	2a 30       	cpi	r18, 0x0A	; 10
     cea:	40 f0       	brcs	.+16     	; 0xcfc <vfprintf+0xb4>
     cec:	8e 32       	cpi	r24, 0x2E	; 46
     cee:	b9 f4       	brne	.+46     	; 0xd1e <vfprintf+0xd6>
     cf0:	36 fc       	sbrc	r3, 6
     cf2:	81 c1       	rjmp	.+770    	; 0xff6 <vfprintf+0x3ae>
     cf4:	23 2d       	mov	r18, r3
     cf6:	20 64       	ori	r18, 0x40	; 64
     cf8:	32 2e       	mov	r3, r18
     cfa:	19 c0       	rjmp	.+50     	; 0xd2e <vfprintf+0xe6>
     cfc:	36 fe       	sbrs	r3, 6
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <vfprintf+0xc4>
     d00:	8a e0       	ldi	r24, 0x0A	; 10
     d02:	98 9e       	mul	r9, r24
     d04:	20 0d       	add	r18, r0
     d06:	11 24       	eor	r1, r1
     d08:	92 2e       	mov	r9, r18
     d0a:	11 c0       	rjmp	.+34     	; 0xd2e <vfprintf+0xe6>
     d0c:	ea e0       	ldi	r30, 0x0A	; 10
     d0e:	2e 9e       	mul	r2, r30
     d10:	20 0d       	add	r18, r0
     d12:	11 24       	eor	r1, r1
     d14:	22 2e       	mov	r2, r18
     d16:	f3 2d       	mov	r31, r3
     d18:	f0 62       	ori	r31, 0x20	; 32
     d1a:	3f 2e       	mov	r3, r31
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <vfprintf+0xe6>
     d1e:	8c 36       	cpi	r24, 0x6C	; 108
     d20:	21 f4       	brne	.+8      	; 0xd2a <vfprintf+0xe2>
     d22:	83 2d       	mov	r24, r3
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	38 2e       	mov	r3, r24
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <vfprintf+0xe6>
     d2a:	88 36       	cpi	r24, 0x68	; 104
     d2c:	41 f4       	brne	.+16     	; 0xd3e <vfprintf+0xf6>
     d2e:	f7 01       	movw	r30, r14
     d30:	93 fd       	sbrc	r25, 3
     d32:	85 91       	lpm	r24, Z+
     d34:	93 ff       	sbrs	r25, 3
     d36:	81 91       	ld	r24, Z+
     d38:	7f 01       	movw	r14, r30
     d3a:	81 11       	cpse	r24, r1
     d3c:	b3 cf       	rjmp	.-154    	; 0xca4 <vfprintf+0x5c>
     d3e:	98 2f       	mov	r25, r24
     d40:	9f 7d       	andi	r25, 0xDF	; 223
     d42:	95 54       	subi	r25, 0x45	; 69
     d44:	93 30       	cpi	r25, 0x03	; 3
     d46:	28 f4       	brcc	.+10     	; 0xd52 <vfprintf+0x10a>
     d48:	0c 5f       	subi	r16, 0xFC	; 252
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	9f e3       	ldi	r25, 0x3F	; 63
     d4e:	99 83       	std	Y+1, r25	; 0x01
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <vfprintf+0x124>
     d52:	83 36       	cpi	r24, 0x63	; 99
     d54:	31 f0       	breq	.+12     	; 0xd62 <vfprintf+0x11a>
     d56:	83 37       	cpi	r24, 0x73	; 115
     d58:	71 f0       	breq	.+28     	; 0xd76 <vfprintf+0x12e>
     d5a:	83 35       	cpi	r24, 0x53	; 83
     d5c:	09 f0       	breq	.+2      	; 0xd60 <vfprintf+0x118>
     d5e:	59 c0       	rjmp	.+178    	; 0xe12 <vfprintf+0x1ca>
     d60:	21 c0       	rjmp	.+66     	; 0xda4 <vfprintf+0x15c>
     d62:	f8 01       	movw	r30, r16
     d64:	80 81       	ld	r24, Z
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	0e 5f       	subi	r16, 0xFE	; 254
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	88 24       	eor	r8, r8
     d6e:	83 94       	inc	r8
     d70:	91 2c       	mov	r9, r1
     d72:	53 01       	movw	r10, r6
     d74:	13 c0       	rjmp	.+38     	; 0xd9c <vfprintf+0x154>
     d76:	28 01       	movw	r4, r16
     d78:	f2 e0       	ldi	r31, 0x02	; 2
     d7a:	4f 0e       	add	r4, r31
     d7c:	51 1c       	adc	r5, r1
     d7e:	f8 01       	movw	r30, r16
     d80:	a0 80       	ld	r10, Z
     d82:	b1 80       	ldd	r11, Z+1	; 0x01
     d84:	36 fe       	sbrs	r3, 6
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <vfprintf+0x146>
     d88:	69 2d       	mov	r22, r9
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0x14a>
     d8e:	6f ef       	ldi	r22, 0xFF	; 255
     d90:	7f ef       	ldi	r23, 0xFF	; 255
     d92:	c5 01       	movw	r24, r10
     d94:	0e 94 10 08 	call	0x1020	; 0x1020 <strnlen>
     d98:	4c 01       	movw	r8, r24
     d9a:	82 01       	movw	r16, r4
     d9c:	f3 2d       	mov	r31, r3
     d9e:	ff 77       	andi	r31, 0x7F	; 127
     da0:	3f 2e       	mov	r3, r31
     da2:	16 c0       	rjmp	.+44     	; 0xdd0 <vfprintf+0x188>
     da4:	28 01       	movw	r4, r16
     da6:	22 e0       	ldi	r18, 0x02	; 2
     da8:	42 0e       	add	r4, r18
     daa:	51 1c       	adc	r5, r1
     dac:	f8 01       	movw	r30, r16
     dae:	a0 80       	ld	r10, Z
     db0:	b1 80       	ldd	r11, Z+1	; 0x01
     db2:	36 fe       	sbrs	r3, 6
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <vfprintf+0x174>
     db6:	69 2d       	mov	r22, r9
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <vfprintf+0x178>
     dbc:	6f ef       	ldi	r22, 0xFF	; 255
     dbe:	7f ef       	ldi	r23, 0xFF	; 255
     dc0:	c5 01       	movw	r24, r10
     dc2:	0e 94 05 08 	call	0x100a	; 0x100a <strnlen_P>
     dc6:	4c 01       	movw	r8, r24
     dc8:	f3 2d       	mov	r31, r3
     dca:	f0 68       	ori	r31, 0x80	; 128
     dcc:	3f 2e       	mov	r3, r31
     dce:	82 01       	movw	r16, r4
     dd0:	33 fc       	sbrc	r3, 3
     dd2:	1b c0       	rjmp	.+54     	; 0xe0a <vfprintf+0x1c2>
     dd4:	82 2d       	mov	r24, r2
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	88 16       	cp	r8, r24
     dda:	99 06       	cpc	r9, r25
     ddc:	b0 f4       	brcc	.+44     	; 0xe0a <vfprintf+0x1c2>
     dde:	b6 01       	movw	r22, r12
     de0:	80 e2       	ldi	r24, 0x20	; 32
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     de8:	2a 94       	dec	r2
     dea:	f4 cf       	rjmp	.-24     	; 0xdd4 <vfprintf+0x18c>
     dec:	f5 01       	movw	r30, r10
     dee:	37 fc       	sbrc	r3, 7
     df0:	85 91       	lpm	r24, Z+
     df2:	37 fe       	sbrs	r3, 7
     df4:	81 91       	ld	r24, Z+
     df6:	5f 01       	movw	r10, r30
     df8:	b6 01       	movw	r22, r12
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     e00:	21 10       	cpse	r2, r1
     e02:	2a 94       	dec	r2
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	82 1a       	sub	r8, r18
     e08:	91 08       	sbc	r9, r1
     e0a:	81 14       	cp	r8, r1
     e0c:	91 04       	cpc	r9, r1
     e0e:	71 f7       	brne	.-36     	; 0xdec <vfprintf+0x1a4>
     e10:	e8 c0       	rjmp	.+464    	; 0xfe2 <vfprintf+0x39a>
     e12:	84 36       	cpi	r24, 0x64	; 100
     e14:	11 f0       	breq	.+4      	; 0xe1a <vfprintf+0x1d2>
     e16:	89 36       	cpi	r24, 0x69	; 105
     e18:	41 f5       	brne	.+80     	; 0xe6a <vfprintf+0x222>
     e1a:	f8 01       	movw	r30, r16
     e1c:	37 fe       	sbrs	r3, 7
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <vfprintf+0x1e6>
     e20:	60 81       	ld	r22, Z
     e22:	71 81       	ldd	r23, Z+1	; 0x01
     e24:	82 81       	ldd	r24, Z+2	; 0x02
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	0c 5f       	subi	r16, 0xFC	; 252
     e2a:	1f 4f       	sbci	r17, 0xFF	; 255
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <vfprintf+0x1f6>
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	07 2e       	mov	r0, r23
     e34:	00 0c       	add	r0, r0
     e36:	88 0b       	sbc	r24, r24
     e38:	99 0b       	sbc	r25, r25
     e3a:	0e 5f       	subi	r16, 0xFE	; 254
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	f3 2d       	mov	r31, r3
     e40:	ff 76       	andi	r31, 0x6F	; 111
     e42:	3f 2e       	mov	r3, r31
     e44:	97 ff       	sbrs	r25, 7
     e46:	09 c0       	rjmp	.+18     	; 0xe5a <vfprintf+0x212>
     e48:	90 95       	com	r25
     e4a:	80 95       	com	r24
     e4c:	70 95       	com	r23
     e4e:	61 95       	neg	r22
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	f0 68       	ori	r31, 0x80	; 128
     e58:	3f 2e       	mov	r3, r31
     e5a:	2a e0       	ldi	r18, 0x0A	; 10
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	a3 01       	movw	r20, r6
     e60:	0e 94 57 08 	call	0x10ae	; 0x10ae <__ultoa_invert>
     e64:	88 2e       	mov	r8, r24
     e66:	86 18       	sub	r8, r6
     e68:	45 c0       	rjmp	.+138    	; 0xef4 <vfprintf+0x2ac>
     e6a:	85 37       	cpi	r24, 0x75	; 117
     e6c:	31 f4       	brne	.+12     	; 0xe7a <vfprintf+0x232>
     e6e:	23 2d       	mov	r18, r3
     e70:	2f 7e       	andi	r18, 0xEF	; 239
     e72:	b2 2e       	mov	r11, r18
     e74:	2a e0       	ldi	r18, 0x0A	; 10
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	25 c0       	rjmp	.+74     	; 0xec4 <vfprintf+0x27c>
     e7a:	93 2d       	mov	r25, r3
     e7c:	99 7f       	andi	r25, 0xF9	; 249
     e7e:	b9 2e       	mov	r11, r25
     e80:	8f 36       	cpi	r24, 0x6F	; 111
     e82:	c1 f0       	breq	.+48     	; 0xeb4 <vfprintf+0x26c>
     e84:	18 f4       	brcc	.+6      	; 0xe8c <vfprintf+0x244>
     e86:	88 35       	cpi	r24, 0x58	; 88
     e88:	79 f0       	breq	.+30     	; 0xea8 <vfprintf+0x260>
     e8a:	b5 c0       	rjmp	.+362    	; 0xff6 <vfprintf+0x3ae>
     e8c:	80 37       	cpi	r24, 0x70	; 112
     e8e:	19 f0       	breq	.+6      	; 0xe96 <vfprintf+0x24e>
     e90:	88 37       	cpi	r24, 0x78	; 120
     e92:	21 f0       	breq	.+8      	; 0xe9c <vfprintf+0x254>
     e94:	b0 c0       	rjmp	.+352    	; 0xff6 <vfprintf+0x3ae>
     e96:	e9 2f       	mov	r30, r25
     e98:	e0 61       	ori	r30, 0x10	; 16
     e9a:	be 2e       	mov	r11, r30
     e9c:	b4 fe       	sbrs	r11, 4
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <vfprintf+0x272>
     ea0:	fb 2d       	mov	r31, r11
     ea2:	f4 60       	ori	r31, 0x04	; 4
     ea4:	bf 2e       	mov	r11, r31
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <vfprintf+0x272>
     ea8:	34 fe       	sbrs	r3, 4
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <vfprintf+0x278>
     eac:	29 2f       	mov	r18, r25
     eae:	26 60       	ori	r18, 0x06	; 6
     eb0:	b2 2e       	mov	r11, r18
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <vfprintf+0x278>
     eb4:	28 e0       	ldi	r18, 0x08	; 8
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <vfprintf+0x27c>
     eba:	20 e1       	ldi	r18, 0x10	; 16
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x27c>
     ec0:	20 e1       	ldi	r18, 0x10	; 16
     ec2:	32 e0       	ldi	r19, 0x02	; 2
     ec4:	f8 01       	movw	r30, r16
     ec6:	b7 fe       	sbrs	r11, 7
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <vfprintf+0x290>
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	0c 5f       	subi	r16, 0xFC	; 252
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <vfprintf+0x29c>
     ed8:	60 81       	ld	r22, Z
     eda:	71 81       	ldd	r23, Z+1	; 0x01
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 5f       	subi	r16, 0xFE	; 254
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
     ee4:	a3 01       	movw	r20, r6
     ee6:	0e 94 57 08 	call	0x10ae	; 0x10ae <__ultoa_invert>
     eea:	88 2e       	mov	r8, r24
     eec:	86 18       	sub	r8, r6
     eee:	fb 2d       	mov	r31, r11
     ef0:	ff 77       	andi	r31, 0x7F	; 127
     ef2:	3f 2e       	mov	r3, r31
     ef4:	36 fe       	sbrs	r3, 6
     ef6:	0d c0       	rjmp	.+26     	; 0xf12 <vfprintf+0x2ca>
     ef8:	23 2d       	mov	r18, r3
     efa:	2e 7f       	andi	r18, 0xFE	; 254
     efc:	a2 2e       	mov	r10, r18
     efe:	89 14       	cp	r8, r9
     f00:	58 f4       	brcc	.+22     	; 0xf18 <vfprintf+0x2d0>
     f02:	34 fe       	sbrs	r3, 4
     f04:	0b c0       	rjmp	.+22     	; 0xf1c <vfprintf+0x2d4>
     f06:	32 fc       	sbrc	r3, 2
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <vfprintf+0x2d4>
     f0a:	83 2d       	mov	r24, r3
     f0c:	8e 7e       	andi	r24, 0xEE	; 238
     f0e:	a8 2e       	mov	r10, r24
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <vfprintf+0x2d4>
     f12:	b8 2c       	mov	r11, r8
     f14:	a3 2c       	mov	r10, r3
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <vfprintf+0x2d6>
     f18:	b8 2c       	mov	r11, r8
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <vfprintf+0x2d6>
     f1c:	b9 2c       	mov	r11, r9
     f1e:	a4 fe       	sbrs	r10, 4
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <vfprintf+0x2f8>
     f22:	fe 01       	movw	r30, r28
     f24:	e8 0d       	add	r30, r8
     f26:	f1 1d       	adc	r31, r1
     f28:	80 81       	ld	r24, Z
     f2a:	80 33       	cpi	r24, 0x30	; 48
     f2c:	21 f4       	brne	.+8      	; 0xf36 <vfprintf+0x2ee>
     f2e:	9a 2d       	mov	r25, r10
     f30:	99 7e       	andi	r25, 0xE9	; 233
     f32:	a9 2e       	mov	r10, r25
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <vfprintf+0x300>
     f36:	a2 fe       	sbrs	r10, 2
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0x2fe>
     f3a:	b3 94       	inc	r11
     f3c:	b3 94       	inc	r11
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <vfprintf+0x300>
     f40:	8a 2d       	mov	r24, r10
     f42:	86 78       	andi	r24, 0x86	; 134
     f44:	09 f0       	breq	.+2      	; 0xf48 <vfprintf+0x300>
     f46:	b3 94       	inc	r11
     f48:	a3 fc       	sbrc	r10, 3
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <vfprintf+0x326>
     f4c:	a0 fe       	sbrs	r10, 0
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <vfprintf+0x314>
     f50:	b2 14       	cp	r11, r2
     f52:	88 f4       	brcc	.+34     	; 0xf76 <vfprintf+0x32e>
     f54:	28 0c       	add	r2, r8
     f56:	92 2c       	mov	r9, r2
     f58:	9b 18       	sub	r9, r11
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <vfprintf+0x330>
     f5c:	b2 14       	cp	r11, r2
     f5e:	60 f4       	brcc	.+24     	; 0xf78 <vfprintf+0x330>
     f60:	b6 01       	movw	r22, r12
     f62:	80 e2       	ldi	r24, 0x20	; 32
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     f6a:	b3 94       	inc	r11
     f6c:	f7 cf       	rjmp	.-18     	; 0xf5c <vfprintf+0x314>
     f6e:	b2 14       	cp	r11, r2
     f70:	18 f4       	brcc	.+6      	; 0xf78 <vfprintf+0x330>
     f72:	2b 18       	sub	r2, r11
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <vfprintf+0x332>
     f76:	98 2c       	mov	r9, r8
     f78:	21 2c       	mov	r2, r1
     f7a:	a4 fe       	sbrs	r10, 4
     f7c:	10 c0       	rjmp	.+32     	; 0xf9e <vfprintf+0x356>
     f7e:	b6 01       	movw	r22, r12
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     f88:	a2 fe       	sbrs	r10, 2
     f8a:	17 c0       	rjmp	.+46     	; 0xfba <vfprintf+0x372>
     f8c:	a1 fc       	sbrc	r10, 1
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <vfprintf+0x34e>
     f90:	88 e7       	ldi	r24, 0x78	; 120
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <vfprintf+0x352>
     f96:	88 e5       	ldi	r24, 0x58	; 88
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	b6 01       	movw	r22, r12
     f9c:	0c c0       	rjmp	.+24     	; 0xfb6 <vfprintf+0x36e>
     f9e:	8a 2d       	mov	r24, r10
     fa0:	86 78       	andi	r24, 0x86	; 134
     fa2:	59 f0       	breq	.+22     	; 0xfba <vfprintf+0x372>
     fa4:	a1 fe       	sbrs	r10, 1
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x364>
     fa8:	8b e2       	ldi	r24, 0x2B	; 43
     faa:	01 c0       	rjmp	.+2      	; 0xfae <vfprintf+0x366>
     fac:	80 e2       	ldi	r24, 0x20	; 32
     fae:	a7 fc       	sbrc	r10, 7
     fb0:	8d e2       	ldi	r24, 0x2D	; 45
     fb2:	b6 01       	movw	r22, r12
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     fba:	89 14       	cp	r8, r9
     fbc:	38 f4       	brcc	.+14     	; 0xfcc <vfprintf+0x384>
     fbe:	b6 01       	movw	r22, r12
     fc0:	80 e3       	ldi	r24, 0x30	; 48
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     fc8:	9a 94       	dec	r9
     fca:	f7 cf       	rjmp	.-18     	; 0xfba <vfprintf+0x372>
     fcc:	8a 94       	dec	r8
     fce:	f3 01       	movw	r30, r6
     fd0:	e8 0d       	add	r30, r8
     fd2:	f1 1d       	adc	r31, r1
     fd4:	80 81       	ld	r24, Z
     fd6:	b6 01       	movw	r22, r12
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     fde:	81 10       	cpse	r8, r1
     fe0:	f5 cf       	rjmp	.-22     	; 0xfcc <vfprintf+0x384>
     fe2:	22 20       	and	r2, r2
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <vfprintf+0x3a0>
     fe6:	42 ce       	rjmp	.-892    	; 0xc6c <vfprintf+0x24>
     fe8:	b6 01       	movw	r22, r12
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     ff2:	2a 94       	dec	r2
     ff4:	f6 cf       	rjmp	.-20     	; 0xfe2 <vfprintf+0x39a>
     ff6:	f6 01       	movw	r30, r12
     ff8:	86 81       	ldd	r24, Z+6	; 0x06
     ffa:	97 81       	ldd	r25, Z+7	; 0x07
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <vfprintf+0x3ba>
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	9f ef       	ldi	r25, 0xFF	; 255
    1002:	2b 96       	adiw	r28, 0x0b	; 11
    1004:	e2 e1       	ldi	r30, 0x12	; 18
    1006:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__epilogue_restores__>

0000100a <strnlen_P>:
    100a:	fc 01       	movw	r30, r24
    100c:	05 90       	lpm	r0, Z+
    100e:	61 50       	subi	r22, 0x01	; 1
    1010:	70 40       	sbci	r23, 0x00	; 0
    1012:	01 10       	cpse	r0, r1
    1014:	d8 f7       	brcc	.-10     	; 0x100c <strnlen_P+0x2>
    1016:	80 95       	com	r24
    1018:	90 95       	com	r25
    101a:	8e 0f       	add	r24, r30
    101c:	9f 1f       	adc	r25, r31
    101e:	08 95       	ret

00001020 <strnlen>:
    1020:	fc 01       	movw	r30, r24
    1022:	61 50       	subi	r22, 0x01	; 1
    1024:	70 40       	sbci	r23, 0x00	; 0
    1026:	01 90       	ld	r0, Z+
    1028:	01 10       	cpse	r0, r1
    102a:	d8 f7       	brcc	.-10     	; 0x1022 <strnlen+0x2>
    102c:	80 95       	com	r24
    102e:	90 95       	com	r25
    1030:	8e 0f       	add	r24, r30
    1032:	9f 1f       	adc	r25, r31
    1034:	08 95       	ret

00001036 <fputc>:
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	fb 01       	movw	r30, r22
    1040:	23 81       	ldd	r18, Z+3	; 0x03
    1042:	21 fd       	sbrc	r18, 1
    1044:	03 c0       	rjmp	.+6      	; 0x104c <fputc+0x16>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	9f ef       	ldi	r25, 0xFF	; 255
    104a:	2c c0       	rjmp	.+88     	; 0x10a4 <fputc+0x6e>
    104c:	22 ff       	sbrs	r18, 2
    104e:	16 c0       	rjmp	.+44     	; 0x107c <fputc+0x46>
    1050:	46 81       	ldd	r20, Z+6	; 0x06
    1052:	57 81       	ldd	r21, Z+7	; 0x07
    1054:	24 81       	ldd	r18, Z+4	; 0x04
    1056:	35 81       	ldd	r19, Z+5	; 0x05
    1058:	42 17       	cp	r20, r18
    105a:	53 07       	cpc	r21, r19
    105c:	44 f4       	brge	.+16     	; 0x106e <fputc+0x38>
    105e:	a0 81       	ld	r26, Z
    1060:	b1 81       	ldd	r27, Z+1	; 0x01
    1062:	9d 01       	movw	r18, r26
    1064:	2f 5f       	subi	r18, 0xFF	; 255
    1066:	3f 4f       	sbci	r19, 0xFF	; 255
    1068:	31 83       	std	Z+1, r19	; 0x01
    106a:	20 83       	st	Z, r18
    106c:	8c 93       	st	X, r24
    106e:	26 81       	ldd	r18, Z+6	; 0x06
    1070:	37 81       	ldd	r19, Z+7	; 0x07
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	37 83       	std	Z+7, r19	; 0x07
    1078:	26 83       	std	Z+6, r18	; 0x06
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <fputc+0x6e>
    107c:	8b 01       	movw	r16, r22
    107e:	ec 01       	movw	r28, r24
    1080:	fb 01       	movw	r30, r22
    1082:	00 84       	ldd	r0, Z+8	; 0x08
    1084:	f1 85       	ldd	r31, Z+9	; 0x09
    1086:	e0 2d       	mov	r30, r0
    1088:	09 95       	icall
    108a:	89 2b       	or	r24, r25
    108c:	e1 f6       	brne	.-72     	; 0x1046 <fputc+0x10>
    108e:	d8 01       	movw	r26, r16
    1090:	16 96       	adiw	r26, 0x06	; 6
    1092:	8d 91       	ld	r24, X+
    1094:	9c 91       	ld	r25, X
    1096:	17 97       	sbiw	r26, 0x07	; 7
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	17 96       	adiw	r26, 0x07	; 7
    109c:	9c 93       	st	X, r25
    109e:	8e 93       	st	-X, r24
    10a0:	16 97       	sbiw	r26, 0x06	; 6
    10a2:	ce 01       	movw	r24, r28
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <__ultoa_invert>:
    10ae:	fa 01       	movw	r30, r20
    10b0:	aa 27       	eor	r26, r26
    10b2:	28 30       	cpi	r18, 0x08	; 8
    10b4:	51 f1       	breq	.+84     	; 0x110a <__ultoa_invert+0x5c>
    10b6:	20 31       	cpi	r18, 0x10	; 16
    10b8:	81 f1       	breq	.+96     	; 0x111a <__ultoa_invert+0x6c>
    10ba:	e8 94       	clt
    10bc:	6f 93       	push	r22
    10be:	6e 7f       	andi	r22, 0xFE	; 254
    10c0:	6e 5f       	subi	r22, 0xFE	; 254
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	8f 4f       	sbci	r24, 0xFF	; 255
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	af 4f       	sbci	r26, 0xFF	; 255
    10ca:	b1 e0       	ldi	r27, 0x01	; 1
    10cc:	3e d0       	rcall	.+124    	; 0x114a <__ultoa_invert+0x9c>
    10ce:	b4 e0       	ldi	r27, 0x04	; 4
    10d0:	3c d0       	rcall	.+120    	; 0x114a <__ultoa_invert+0x9c>
    10d2:	67 0f       	add	r22, r23
    10d4:	78 1f       	adc	r23, r24
    10d6:	89 1f       	adc	r24, r25
    10d8:	9a 1f       	adc	r25, r26
    10da:	a1 1d       	adc	r26, r1
    10dc:	68 0f       	add	r22, r24
    10de:	79 1f       	adc	r23, r25
    10e0:	8a 1f       	adc	r24, r26
    10e2:	91 1d       	adc	r25, r1
    10e4:	a1 1d       	adc	r26, r1
    10e6:	6a 0f       	add	r22, r26
    10e8:	71 1d       	adc	r23, r1
    10ea:	81 1d       	adc	r24, r1
    10ec:	91 1d       	adc	r25, r1
    10ee:	a1 1d       	adc	r26, r1
    10f0:	20 d0       	rcall	.+64     	; 0x1132 <__ultoa_invert+0x84>
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <__ultoa_invert+0x48>
    10f4:	68 94       	set
    10f6:	3f 91       	pop	r19
    10f8:	2a e0       	ldi	r18, 0x0A	; 10
    10fa:	26 9f       	mul	r18, r22
    10fc:	11 24       	eor	r1, r1
    10fe:	30 19       	sub	r19, r0
    1100:	30 5d       	subi	r19, 0xD0	; 208
    1102:	31 93       	st	Z+, r19
    1104:	de f6       	brtc	.-74     	; 0x10bc <__ultoa_invert+0xe>
    1106:	cf 01       	movw	r24, r30
    1108:	08 95       	ret
    110a:	46 2f       	mov	r20, r22
    110c:	47 70       	andi	r20, 0x07	; 7
    110e:	40 5d       	subi	r20, 0xD0	; 208
    1110:	41 93       	st	Z+, r20
    1112:	b3 e0       	ldi	r27, 0x03	; 3
    1114:	0f d0       	rcall	.+30     	; 0x1134 <__ultoa_invert+0x86>
    1116:	c9 f7       	brne	.-14     	; 0x110a <__ultoa_invert+0x5c>
    1118:	f6 cf       	rjmp	.-20     	; 0x1106 <__ultoa_invert+0x58>
    111a:	46 2f       	mov	r20, r22
    111c:	4f 70       	andi	r20, 0x0F	; 15
    111e:	40 5d       	subi	r20, 0xD0	; 208
    1120:	4a 33       	cpi	r20, 0x3A	; 58
    1122:	18 f0       	brcs	.+6      	; 0x112a <__ultoa_invert+0x7c>
    1124:	49 5d       	subi	r20, 0xD9	; 217
    1126:	31 fd       	sbrc	r19, 1
    1128:	40 52       	subi	r20, 0x20	; 32
    112a:	41 93       	st	Z+, r20
    112c:	02 d0       	rcall	.+4      	; 0x1132 <__ultoa_invert+0x84>
    112e:	a9 f7       	brne	.-22     	; 0x111a <__ultoa_invert+0x6c>
    1130:	ea cf       	rjmp	.-44     	; 0x1106 <__ultoa_invert+0x58>
    1132:	b4 e0       	ldi	r27, 0x04	; 4
    1134:	a6 95       	lsr	r26
    1136:	97 95       	ror	r25
    1138:	87 95       	ror	r24
    113a:	77 95       	ror	r23
    113c:	67 95       	ror	r22
    113e:	ba 95       	dec	r27
    1140:	c9 f7       	brne	.-14     	; 0x1134 <__ultoa_invert+0x86>
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 05       	cpc	r22, r1
    1146:	71 05       	cpc	r23, r1
    1148:	08 95       	ret
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	0a 2e       	mov	r0, r26
    1150:	06 94       	lsr	r0
    1152:	57 95       	ror	r21
    1154:	47 95       	ror	r20
    1156:	37 95       	ror	r19
    1158:	27 95       	ror	r18
    115a:	ba 95       	dec	r27
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__ultoa_invert+0xa2>
    115e:	62 0f       	add	r22, r18
    1160:	73 1f       	adc	r23, r19
    1162:	84 1f       	adc	r24, r20
    1164:	95 1f       	adc	r25, r21
    1166:	a0 1d       	adc	r26, r0
    1168:	08 95       	ret

0000116a <__divmodsi4>:
    116a:	05 2e       	mov	r0, r21
    116c:	97 fb       	bst	r25, 7
    116e:	1e f4       	brtc	.+6      	; 0x1176 <__divmodsi4+0xc>
    1170:	00 94       	com	r0
    1172:	0e 94 cc 08 	call	0x1198	; 0x1198 <__negsi2>
    1176:	57 fd       	sbrc	r21, 7
    1178:	07 d0       	rcall	.+14     	; 0x1188 <__divmodsi4_neg2>
    117a:	0e 94 1e 09 	call	0x123c	; 0x123c <__udivmodsi4>
    117e:	07 fc       	sbrc	r0, 7
    1180:	03 d0       	rcall	.+6      	; 0x1188 <__divmodsi4_neg2>
    1182:	4e f4       	brtc	.+18     	; 0x1196 <__divmodsi4_exit>
    1184:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__negsi2>

00001188 <__divmodsi4_neg2>:
    1188:	50 95       	com	r21
    118a:	40 95       	com	r20
    118c:	30 95       	com	r19
    118e:	21 95       	neg	r18
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	4f 4f       	sbci	r20, 0xFF	; 255
    1194:	5f 4f       	sbci	r21, 0xFF	; 255

00001196 <__divmodsi4_exit>:
    1196:	08 95       	ret

00001198 <__negsi2>:
    1198:	90 95       	com	r25
    119a:	80 95       	com	r24
    119c:	70 95       	com	r23
    119e:	61 95       	neg	r22
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	08 95       	ret

000011a8 <__muluhisi3>:
    11a8:	0e 94 5d 05 	call	0xaba	; 0xaba <__umulhisi3>
    11ac:	a5 9f       	mul	r26, r21
    11ae:	90 0d       	add	r25, r0
    11b0:	b4 9f       	mul	r27, r20
    11b2:	90 0d       	add	r25, r0
    11b4:	a4 9f       	mul	r26, r20
    11b6:	80 0d       	add	r24, r0
    11b8:	91 1d       	adc	r25, r1
    11ba:	11 24       	eor	r1, r1
    11bc:	08 95       	ret

000011be <__mulshisi3>:
    11be:	b7 ff       	sbrs	r27, 7
    11c0:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__muluhisi3>

000011c4 <__mulohisi3>:
    11c4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__muluhisi3>
    11c8:	82 1b       	sub	r24, r18
    11ca:	93 0b       	sbc	r25, r19
    11cc:	08 95       	ret

000011ce <__prologue_saves__>:
    11ce:	2f 92       	push	r2
    11d0:	3f 92       	push	r3
    11d2:	4f 92       	push	r4
    11d4:	5f 92       	push	r5
    11d6:	6f 92       	push	r6
    11d8:	7f 92       	push	r7
    11da:	8f 92       	push	r8
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	ca 1b       	sub	r28, r26
    11f8:	db 0b       	sbc	r29, r27
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	09 94       	ijmp

00001206 <__epilogue_restores__>:
    1206:	2a 88       	ldd	r2, Y+18	; 0x12
    1208:	39 88       	ldd	r3, Y+17	; 0x11
    120a:	48 88       	ldd	r4, Y+16	; 0x10
    120c:	5f 84       	ldd	r5, Y+15	; 0x0f
    120e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1210:	7d 84       	ldd	r7, Y+13	; 0x0d
    1212:	8c 84       	ldd	r8, Y+12	; 0x0c
    1214:	9b 84       	ldd	r9, Y+11	; 0x0b
    1216:	aa 84       	ldd	r10, Y+10	; 0x0a
    1218:	b9 84       	ldd	r11, Y+9	; 0x09
    121a:	c8 84       	ldd	r12, Y+8	; 0x08
    121c:	df 80       	ldd	r13, Y+7	; 0x07
    121e:	ee 80       	ldd	r14, Y+6	; 0x06
    1220:	fd 80       	ldd	r15, Y+5	; 0x05
    1222:	0c 81       	ldd	r16, Y+4	; 0x04
    1224:	1b 81       	ldd	r17, Y+3	; 0x03
    1226:	aa 81       	ldd	r26, Y+2	; 0x02
    1228:	b9 81       	ldd	r27, Y+1	; 0x01
    122a:	ce 0f       	add	r28, r30
    122c:	d1 1d       	adc	r29, r1
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	ed 01       	movw	r28, r26
    123a:	08 95       	ret

0000123c <__udivmodsi4>:
    123c:	a1 e2       	ldi	r26, 0x21	; 33
    123e:	1a 2e       	mov	r1, r26
    1240:	aa 1b       	sub	r26, r26
    1242:	bb 1b       	sub	r27, r27
    1244:	fd 01       	movw	r30, r26
    1246:	0d c0       	rjmp	.+26     	; 0x1262 <__udivmodsi4_ep>

00001248 <__udivmodsi4_loop>:
    1248:	aa 1f       	adc	r26, r26
    124a:	bb 1f       	adc	r27, r27
    124c:	ee 1f       	adc	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	a2 17       	cp	r26, r18
    1252:	b3 07       	cpc	r27, r19
    1254:	e4 07       	cpc	r30, r20
    1256:	f5 07       	cpc	r31, r21
    1258:	20 f0       	brcs	.+8      	; 0x1262 <__udivmodsi4_ep>
    125a:	a2 1b       	sub	r26, r18
    125c:	b3 0b       	sbc	r27, r19
    125e:	e4 0b       	sbc	r30, r20
    1260:	f5 0b       	sbc	r31, r21

00001262 <__udivmodsi4_ep>:
    1262:	66 1f       	adc	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	1a 94       	dec	r1
    126c:	69 f7       	brne	.-38     	; 0x1248 <__udivmodsi4_loop>
    126e:	60 95       	com	r22
    1270:	70 95       	com	r23
    1272:	80 95       	com	r24
    1274:	90 95       	com	r25
    1276:	9b 01       	movw	r18, r22
    1278:	ac 01       	movw	r20, r24
    127a:	bd 01       	movw	r22, r26
    127c:	cf 01       	movw	r24, r30
    127e:	08 95       	ret

00001280 <_exit>:
    1280:	f8 94       	cli

00001282 <__stop_program>:
    1282:	ff cf       	rjmp	.-2      	; 0x1282 <__stop_program>
