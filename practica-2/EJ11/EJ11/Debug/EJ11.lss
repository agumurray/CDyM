
EJ11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b5  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ef  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f7  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000133  00000000  00000000  0000182f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 92 00 	call	0x124	; 0x124 <main>
  88:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Button_Update>:
static uint8_t debounce_counter = 0;

uint8_t Button_Update(uint8_t pin_level) {
	uint8_t button_pressed = 0;

	switch (btn_state) {
  90:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <btn_state>
  94:	91 30       	cpi	r25, 0x01	; 1
  96:	79 f0       	breq	.+30     	; 0xb6 <Button_Update+0x26>
  98:	28 f0       	brcs	.+10     	; 0xa4 <Button_Update+0x14>
  9a:	92 30       	cpi	r25, 0x02	; 2
  9c:	f1 f0       	breq	.+60     	; 0xda <Button_Update+0x4a>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	29 f1       	breq	.+74     	; 0xec <Button_Update+0x5c>
  a2:	36 c0       	rjmp	.+108    	; 0x110 <Button_Update+0x80>
		case UP:
		if (pin_level == 0) {
  a4:	81 11       	cpse	r24, r1
  a6:	36 c0       	rjmp	.+108    	; 0x114 <Button_Update+0x84>
			btn_state = FALLING;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <btn_state>
			debounce_counter = 0;
  ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

static ButtonState btn_state = UP;
static uint8_t debounce_counter = 0;

uint8_t Button_Update(uint8_t pin_level) {
	uint8_t button_pressed = 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	08 95       	ret
			btn_state = FALLING;
			debounce_counter = 0;
		}
		break;
		case FALLING:
		if (pin_level == 0) {
  b6:	81 11       	cpse	r24, r1
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <Button_Update+0x42>
			if (++debounce_counter >= DEBOUNCE_TIME) {
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c4:	84 31       	cpi	r24, 0x14	; 20
  c6:	40 f1       	brcs	.+80     	; 0x118 <Button_Update+0x88>
				btn_state = DOWN;
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <btn_state>
				button_pressed = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
			}
			} else {
			btn_state = UP;
  d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <btn_state>

static ButtonState btn_state = UP;
static uint8_t debounce_counter = 0;

uint8_t Button_Update(uint8_t pin_level) {
	uint8_t button_pressed = 0;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret
			} else {
			btn_state = UP;
		}
		break;
		case DOWN:
		if (pin_level == 1) {
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	f9 f4       	brne	.+62     	; 0x11c <Button_Update+0x8c>
			btn_state = RISING;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <btn_state>
			debounce_counter = 0;
  e4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

static ButtonState btn_state = UP;
static uint8_t debounce_counter = 0;

uint8_t Button_Update(uint8_t pin_level) {
	uint8_t button_pressed = 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	08 95       	ret
			btn_state = RISING;
			debounce_counter = 0;
		}
		break;
		case RISING:
		if (pin_level == 1) {
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	59 f4       	brne	.+22     	; 0x106 <Button_Update+0x76>
			if (++debounce_counter >= DEBOUNCE_TIME) {
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  fa:	84 31       	cpi	r24, 0x14	; 20
  fc:	88 f0       	brcs	.+34     	; 0x120 <Button_Update+0x90>
				btn_state = UP;
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <btn_state>

static ButtonState btn_state = UP;
static uint8_t debounce_counter = 0;

uint8_t Button_Update(uint8_t pin_level) {
	uint8_t button_pressed = 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 95       	ret
		if (pin_level == 1) {
			if (++debounce_counter >= DEBOUNCE_TIME) {
				btn_state = UP;
			}
			} else {
			btn_state = DOWN;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <btn_state>

static ButtonState btn_state = UP;
static uint8_t debounce_counter = 0;

uint8_t Button_Update(uint8_t pin_level) {
	uint8_t button_pressed = 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret
 120:	80 e0       	ldi	r24, 0x00	; 0
			btn_state = DOWN;
		}
		break;
	}
	return button_pressed;
}
 122:	08 95       	ret

00000124 <main>:

// ?? Main program
int main(void) {
	// Configurar PD2 como entrada con pull-up
	DDRD &= ~(1 << PD2);   // Entrada
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2);   // Pull-up
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	8b b9       	out	0x0b, r24	; 11

	// Configurar PB0 como salida (LED testigo)
	DDRB |= (1 << PB0);
 130:	84 b1       	in	r24, 0x04	; 4
 132:	81 60       	ori	r24, 0x01	; 1
 134:	84 b9       	out	0x04, r24	; 4

	while (1) {
		uint8_t pin = (PIND & (1 << PD2)) >> PD2;
 136:	89 b1       	in	r24, 0x09	; 9
 138:	84 70       	andi	r24, 0x04	; 4
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	95 95       	asr	r25
 13e:	87 95       	ror	r24
 140:	95 95       	asr	r25
 142:	87 95       	ror	r24
		if (Button_Update(pin) == 1) {
 144:	0e 94 48 00 	call	0x90	; 0x90 <Button_Update>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	19 f4       	brne	.+6      	; 0x152 <main+0x2e>
			// Toggle del LED en cada pulsación detectada
			PORTB ^= (1 << PB0);
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	89 27       	eor	r24, r25
 150:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x32>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x38>
 15c:	00 00       	nop
 15e:	eb cf       	rjmp	.-42     	; 0x136 <main+0x12>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
