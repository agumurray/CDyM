
EJ10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e9  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000673  00000000  00000000  000008a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035d  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Timer0_Init_CTC>:

#define F_CPU 16000000UL

void Timer0_Init_CTC(void)
{
	TCCR0A = (1 << WGM01); // Modo CTC (Clear Timer on Compare Match)
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 64
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // 1 ms con prescaler 64
  88:	89 ef       	ldi	r24, 0xF9	; 249
  8a:	87 bd       	out	0x27, r24	; 39
	TCNT0 = 0;
  8c:	16 bc       	out	0x26, r1	; 38
  8e:	08 95       	ret

00000090 <retardo_ms>:
}

void retardo_ms(uint8_t ms)
{
	for (uint8_t i = 0; i < ms; i++)
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	07 c0       	rjmp	.+14     	; 0xa2 <retardo_ms+0x12>
	{
		TCNT0 = 0; // Reiniciar el contador
  94:	16 bc       	out	0x26, r1	; 38
		TIFR0 |= (1 << OCF0A); // Limpiar la bandera de comparación previa
  96:	95 b3       	in	r25, 0x15	; 21
  98:	92 60       	ori	r25, 0x02	; 2
  9a:	95 bb       	out	0x15, r25	; 21

		// Esperar hasta que el timer llegue a OCR0A
		while (!(TIFR0 & (1 << OCF0A)));
  9c:	a9 9b       	sbis	0x15, 1	; 21
  9e:	fe cf       	rjmp	.-4      	; 0x9c <retardo_ms+0xc>
	TCNT0 = 0;
}

void retardo_ms(uint8_t ms)
{
	for (uint8_t i = 0; i < ms; i++)
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	28 17       	cp	r18, r24
  a4:	b8 f3       	brcs	.-18     	; 0x94 <retardo_ms+0x4>
		TIFR0 |= (1 << OCF0A); // Limpiar la bandera de comparación previa

		// Esperar hasta que el timer llegue a OCR0A
		while (!(TIFR0 & (1 << OCF0A)));
	}
}
  a6:	08 95       	ret

000000a8 <main>:

int main(void)
{
	DDRB |= (1 << PB0); // PB0 como salida
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	84 b9       	out	0x04, r24	; 4

	Timer0_Init_CTC();
  ae:	0e 94 40 00 	call	0x80	; 0x80 <Timer0_Init_CTC>

	while (1)
	{
		PORTB ^= (1 << PB0); // Toggle LED
  b2:	95 b1       	in	r25, 0x05	; 5
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 27       	eor	r24, r25
  b8:	85 b9       	out	0x05, r24	; 5
		retardo_ms(10); // Esperar 200 ms
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	0e 94 48 00 	call	0x90	; 0x90 <retardo_ms>
  c0:	f8 cf       	rjmp	.-16     	; 0xb2 <main+0xa>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
